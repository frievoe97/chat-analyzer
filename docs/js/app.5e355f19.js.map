{"version":3,"file":"js/app.5e355f19.js","mappings":"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M,SAANkE,IAAAA,KAAAA,KAAAA,GAAAA,GACM,MAANrK,EACM,UAANoG,EAAAA,IAAAA,YACM,gBAANC,GACM,MAANC,CAAAA,EACM,IAANV,CAAAA,EACM,OAANW,CAAAA,EACM,OAANC,CAAAA,EACM,EAAN1E,CAAAA,EACM,EAANC,CAAAA,EACM,MAAN+F,CAAAA,EACM,MAANC,CAAAA,EACM,MAANC,CAAAA,EACM,OAAN1F,CAAQ,IAAR4C,GAAQ,MAARC,GAAQ,OAARC,GAAQ,KAARC,IACM,MAANC,IAEM,OAANC,IACM,UAANmC,CAAAA,SAAAA,OAAAA,OAAAA,MAAAA,SACM,WAANO,GACM,cAANC,GACM,YAANC,GACM,OAANC,CACA,MACA,QACA,OACA,QACA,QACA,QACA,WACA,SACA,aACA,aACA,SACA,cACA,eACA,MACA,QACA,OACA,QACA,QACA,QACA,WACA,SACA,aACA,aACA,SACA,cACA,eACA,MACA,QACA,OACA,QACA,QACA,QACA,WACA,SACA,aACA,aACA,SACA,cACA,gBAEM,MAANC,EACM,QAANZ,SAEE,EACA,UACE,KAAJ,gCACAa,GAAAA,KAAAA,YAAAA,IAAAA,IAEI,KAAJ,yBACI,OAAJC,iBAAAA,SAAAA,KAAAA,gBACI,KAAJ,gBACI,KAAJ,oBACI,KAAJ,cACE,EACA,MAAFlF,CACI,OACE,KAAN,oBACM,KAAN,cACI,EACA,YAAJuE,WACM,KAAN,YACI,GAEF,QAAFnG,CAEI,kBAAJ+G,WACM,KAAN,cACM,KAAN,iBACM,IAAN,uCACQ,MAAR,mBACQ,KAAR,2BACQ,KAAR,6BACM,CACF,EACA,cAAJC,iBACM,KAAN,MACAC,SAAAA,cAAAA,SAAAA,KAAAA,SAAAA,aACA,mCACI,EACA,eAAJC,WAEM,MAAN,EACAD,SAAAA,cAAAA,SAAAA,KAAAA,SAAAA,aACA,oCACA,gBACQ,KAAR,QAEI,EACA,aAAJf,SAAAA,GACM,KAAN,QACM,KAAN,aACI,EACA,WAAJiB,WACA,qBACQ,KAAR,4BAEM,KAAN,YACI,EACA,WAAJC,WACMlD,EAAAA,GAAAA,aAAAA,KACN,Q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","sources":["webpack://chat-analyzer/./src/App.vue?9696","webpack://chat-analyzer/./src/components/charts/MsgOverTime.vue?63dd","webpack://chat-analyzer/./src/components/PlotButtons.vue?af5c","webpack://chat-analyzer/src/components/PlotButtons.vue","webpack://chat-analyzer/./src/components/PlotButtons.vue?654b","webpack://chat-analyzer/./src/components/PlotButtons.vue","webpack://chat-analyzer/src/components/charts/MsgOverTime.vue","webpack://chat-analyzer/./src/components/charts/MsgOverTime.vue?ef45","webpack://chat-analyzer/./src/components/charts/MsgOverTime.vue","webpack://chat-analyzer/./src/components/charts/MsgOverTime2.vue?cb8c","webpack://chat-analyzer/src/components/charts/MsgOverTime2.vue","webpack://chat-analyzer/./src/components/charts/MsgOverTime2.vue?e5e1","webpack://chat-analyzer/./src/components/charts/MsgOverTime2.vue","webpack://chat-analyzer/./src/components/charts/MsgOverTime3.vue?0157","webpack://chat-analyzer/src/components/charts/MsgOverTime3.vue","webpack://chat-analyzer/./src/components/charts/MsgOverTime3.vue?bfc1","webpack://chat-analyzer/./src/components/charts/MsgOverTime3.vue","webpack://chat-analyzer/./src/components/charts/MsgOverTime4.vue?6e1a","webpack://chat-analyzer/src/components/charts/MsgOverTime4.vue","webpack://chat-analyzer/./src/components/charts/MsgOverTime4.vue?ca19","webpack://chat-analyzer/./src/components/charts/MsgOverTime4.vue","webpack://chat-analyzer/./src/components/charts/D3LineChart.vue?3fad","webpack://chat-analyzer/src/components/charts/D3LineChart.vue","webpack://chat-analyzer/./src/components/charts/D3LineChart.vue?41bc","webpack://chat-analyzer/./src/components/charts/D3LineChart.vue","webpack://chat-analyzer/./src/components/charts/D3LineChartv2.vue?01dd","webpack://chat-analyzer/src/components/charts/D3LineChartv2.vue","webpack://chat-analyzer/./src/components/charts/D3LineChartv2.vue?2ec0","webpack://chat-analyzer/./src/components/charts/D3LineChartv2.vue","webpack://chat-analyzer/./src/components/charts/Plot1.vue?290f","webpack://chat-analyzer/src/components/charts/Plot1.vue","webpack://chat-analyzer/./src/components/charts/Plot1.vue?091e","webpack://chat-analyzer/./src/components/charts/Plot1.vue","webpack://chat-analyzer/./src/components/charts/Plot2.vue?db78","webpack://chat-analyzer/src/components/charts/Plot2.vue","webpack://chat-analyzer/./src/components/charts/Plot2.vue?fde7","webpack://chat-analyzer/./src/components/charts/Plot2.vue","webpack://chat-analyzer/./src/components/charts/Plot6.vue?c4b1","webpack://chat-analyzer/src/components/charts/Plot6.vue","webpack://chat-analyzer/./src/components/charts/Plot6.vue?fea4","webpack://chat-analyzer/./src/components/charts/Plot6.vue","webpack://chat-analyzer/./src/components/charts/TestPlot.vue?7a6f","webpack://chat-analyzer/src/components/charts/TestPlot.vue","webpack://chat-analyzer/./src/components/charts/TestPlot.vue?6f11","webpack://chat-analyzer/./src/components/charts/TestPlot.vue","webpack://chat-analyzer/./src/components/charts/D3BarPlot.vue?4577","webpack://chat-analyzer/src/components/charts/D3BarPlot.vue","webpack://chat-analyzer/./src/components/charts/D3BarPlot.vue?e05d","webpack://chat-analyzer/./src/components/charts/D3BarPlot.vue","webpack://chat-analyzer/./src/components/charts/D3LineChartv3Resize.vue?1f28","webpack://chat-analyzer/src/components/charts/D3LineChartv3Resize.vue","webpack://chat-analyzer/./src/components/charts/D3LineChartv3Resize.vue?f420","webpack://chat-analyzer/./src/components/charts/D3LineChartv3Resize.vue","webpack://chat-analyzer/./src/components/charts/TestVue.vue?2c51","webpack://chat-analyzer/src/components/charts/TestVue.vue","webpack://chat-analyzer/./src/components/charts/TestVue.vue?4cbd","webpack://chat-analyzer/./src/components/charts/TestVue.vue","webpack://chat-analyzer/src/App.vue","webpack://chat-analyzer/./src/App.vue?facb","webpack://chat-analyzer/./src/App.vue","webpack://chat-analyzer/./src/main.js","webpack://chat-analyzer/webpack/bootstrap","webpack://chat-analyzer/webpack/runtime/chunk loaded","webpack://chat-analyzer/webpack/runtime/compat get default export","webpack://chat-analyzer/webpack/runtime/define property getters","webpack://chat-analyzer/webpack/runtime/global","webpack://chat-analyzer/webpack/runtime/hasOwnProperty shorthand","webpack://chat-analyzer/webpack/runtime/make namespace object","webpack://chat-analyzer/webpack/runtime/jsonp chunk loading","webpack://chat-analyzer/webpack/startup"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(this.showSelectedNames),expression:\"this.showSelectedNames\"}],staticClass:\"blurred-background\"}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(this.showSelectedNames),expression:\"this.showSelectedNames\"}],staticClass:\"select-names\"},[_c('h1',{staticClass:\"select-names-header\"},[_vm._v(\"Select the Names\")]),_c('div',{staticClass:\"select-names-general-buttons\"},[_c('button',{staticClass:\"select-names-general-button\",on:{\"click\":function($event){return _vm.selectAllNames()}}},[_vm._v(\" Select All \")]),_c('button',{staticClass:\"select-names-general-button\",on:{\"click\":function($event){return _vm.unselectAllNames()}}},[_vm._v(\" Unselect All \")]),_c('button',{staticClass:\"select-names-general-button\",on:{\"click\":function($event){return _vm.unselectUnsavedContacts()}}},[_vm._v(\" Unselect not saved contacts \")]),_c('button',{staticClass:\"select-names-general-button\",on:{\"click\":function($event){return _vm.selectTopTen()}}},[_vm._v(\" Select Top 10 \")])]),_c('div',{staticClass:\"select-names-list\"},_vm._l((_vm.selectedNames),function(element,index){return _c('div',{key:index,staticClass:\"select-names-line\"},[_c('input',{staticClass:\"select-name-button\",attrs:{\"type\":\"checkbox\"},domProps:{\"checked\":element.active},on:{\"click\":function($event){return _vm.selectName(index)}}}),_c('div',{staticClass:\"select-names-name\"},[_vm._v(\" \"+_vm._s(element.name)+\" (Nachrichten: \"+_vm._s(element.numberOfMessages)+\") \")])])}),0),_c('div',{staticClass:\"select-names-bottom-buttons\"},[_c('button',{staticClass:\"select-names-bottom-button\",on:{\"click\":function($event){return _vm.finishSelectNames()}}},[_vm._v(\" Weiter \")])])]),_c('div',{staticClass:\"reselect-names\"},[_c('div',{staticClass:\"reselect-names-top\"},[_c('button',{on:{\"click\":function($event){_vm.showReselectNames = !_vm.showReselectNames}}},[_vm._v(\" \"+_vm._s(_vm.showReselectNames)+\" \")]),_c('v-icon',{attrs:{\"name\":\"arrow-down\"}})],1),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showReselectNames),expression:\"showReselectNames\"}],staticClass:\"reselect-names-content\"},_vm._l((_vm.selectedNames),function(element,index){return _c('div',{key:index,staticClass:\"reselect-names-line\"},[_c('input',{staticClass:\"reselect-name-button\",attrs:{\"type\":\"checkbox\"},domProps:{\"checked\":element.active},on:{\"click\":function($event){return _vm.selectName(index)}}}),_c('div',{staticClass:\"reselect-names-name\"},[_vm._v(\" \"+_vm._s(element.name)+\" (Nachrichten: \"+_vm._s(element.numberOfMessages)+\") \")])])}),0)]),_c('div',{attrs:{\"id\":\"zone\"}},[_c('input',{staticClass:\"inputfile\",attrs:{\"type\":\"file\",\"id\":\"input\",\"name\":\"myfile\"},on:{\"change\":_vm.showfile}}),_c('label',{attrs:{\"for\":\"file\"}},[_vm._v(\"Choose a file\")])]),_c('div',{staticClass:\"grid\"},[_c('div',{staticClass:\"grid-element\",attrs:{\"id\":\"grid-plot-1\"}},[_c('Plot1',{attrs:{\"data\":_vm.allChats,\"globalWidth\":_vm.widthPlot1,\"classIDProp\":\"plot-1\"}})],1),_c('div',{staticClass:\"grid-element\",attrs:{\"id\":\"grid-plot-2\"}},[_c('Plot2',{attrs:{\"data\":_vm.allChats,\"globalWidth\":_vm.widthPlot2,\"classIDProp\":\"plot-2\"}})],1),_c('div',{staticClass:\"grid-element\",attrs:{\"id\":\"grid-plot-6\"}},[_c('Plot6',{attrs:{\"data\":_vm.allChats,\"globalWidth\":_vm.widthPlot6,\"classIDProp\":\"plot-6\"}})],1),_c('div',[_c('TestPlot',{attrs:{\"data\":_vm.allChats}})],1)])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('plotly',{staticClass:\"plot\",attrs:{\"data\":_vm.dataTest,\"layout\":_vm.layout,\"transition\":_vm.transition}}),_c('PlotButtons',{attrs:{\"buttons\":_vm.buttonsNames}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"button-box\",staticStyle:{\"height\":\"50px\"}},_vm._l((_vm.buttons),function(name){return _c('button',{key:name,staticClass:\"button\"},[_vm._v(\" \"+_vm._s(name)+\" \")])}),0)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"button-box\" style=\"height: 50px\">\n        <button class=\"button\" v-for=\"name in buttons\" v-bind:key=\"name\">\n            {{ name }}\n        </button>\n    </div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport VuePapaParse from \"vue-papa-parse\";\nVue.use(VuePapaParse);\n\nexport default {\n    components: {},\n    name: \"PlotButtons\",\n    props: {\n        buttons: Array,\n    },\n    data() {\n        return {};\n    },\n    mounted() {},\n\n    methods: {},\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.button-box {\n    width: max-content;\n    margin: auto;\n}\n\n.button {\n    min-width: 50px;\n    width: max-content;\n    height: 40px;\n    border-style: none;\n    background-color: white;\n    margin-right: 20px;\n    text-decoration: none;\n    color: #000;\n}\n\n.button:last-child {\n    margin-right: 0px;\n}\n\n.button {\n    position: relative;\n    color: #000;\n    text-decoration: none;\n}\n\n.button:hover {\n    color: #000;\n}\n\n.button::before {\n    content: \"\";\n    position: absolute;\n    display: block;\n    width: 100%;\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: #000;\n    transform: scaleX(0);\n    transition: transform 0.3s ease;\n}\n\n.button:hover::before {\n    transform: scaleX(1);\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./PlotButtons.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./PlotButtons.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./PlotButtons.vue?vue&type=template&id=8395d16a&scoped=true&\"\nimport script from \"./PlotButtons.vue?vue&type=script&lang=js&\"\nexport * from \"./PlotButtons.vue?vue&type=script&lang=js&\"\nimport style0 from \"./PlotButtons.vue?vue&type=style&index=0&id=8395d16a&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"8395d16a\",\n  null\n  \n)\n\nexport default component.exports","<template>\n    <div>\n        <plotly\n            class=\"plot\"\n            :data=\"dataTest\"\n            :layout=\"layout\"\n            :transition=\"transition\"\n        ></plotly>\n        <PlotButtons :buttons=\"buttonsNames\" />\n    </div>\n</template>\n\n<script>\nimport { Plotly } from \"vue-plotly\";\nimport Vue from \"vue\";\nimport VuePapaParse from \"vue-papa-parse\";\nimport PlotButtons from \"../PlotButtons.vue\";\nVue.use(VuePapaParse);\n\nexport default {\n    name: \"MsgOverTime\",\n    components: {\n        Plotly,\n        PlotButtons,\n    },\n    props: {\n        msgData: Array,\n        names: Array,\n    },\n    data() {\n        return {\n            buttonsNames: [\"day\", \"month\", \"year\"],\n            dataTest: [\n                {\n                    x: [],\n                    y: [],\n                    title: \"abc\",\n                    //mode: \"bar\",\n                    type: \"bar\",\n                },\n            ],\n            layout: {\n                title: \"Number of messages since start\",\n                yaxis: {\n                    autorange: true,\n                    automargin: true,\n                    mirror: true,\n                },\n                margin: 0,\n                padding: 0,\n                showlegend: true,\n                legend: {\n                    orientation: \"h\",\n                },\n                xaxis: {\n                    mirror: true,\n                    rangeselector: {\n                        buttons: [\n                            {\n                                count: 1,\n                                label: \"1 month\",\n                                step: \"month\",\n                                stepmode: \"backward\",\n                            },\n                            {\n                                count: 6,\n                                label: \"6 month\",\n                                step: \"month\",\n                                stepmode: \"backward\",\n                            },\n                            {\n                                count: 12,\n                                label: \"12 month\",\n                                step: \"month\",\n                                stepmode: \"backward\",\n                            },\n                            { step: \"all\" },\n                        ],\n                    },\n                    rangeslider: { autorange: true },\n                    type: \"date\",\n                    //autorange: true,\n                    //tickformat: \"%d/%m\",\n                },\n            },\n            transition: {\n                duration: 500,\n                easing: \"cubic-in-out\",\n            },\n            frame: {\n                duration: 500,\n            },\n        };\n    },\n    mounted() {\n        this.prepareData();\n    },\n    watch: {\n        msgData() {\n            this.prepareData();\n        },\n    },\n    methods: {\n        prepareData: function () {\n            if (this.msgData.length == 0) {\n                return;\n            }\n            this.dataTest = [];\n            // Each name\n            for (let i = 0; i < this.names.length; i++) {\n                const nameTemp = this.names[i];\n                let dataObj = {\n                    x: [],\n                    y: [],\n                    type: \"bar\",\n                    legend: true,\n                    name: nameTemp,\n                };\n                let currentValue = 0;\n                let prevDate = \"\";\n                let date = \"\";\n                for (let j = 0; j < this.msgData.length; j++) {\n                    if (this.msgData[i].name == nameTemp) {\n                        date = this.msgData[j].date;\n                        if (j == 0) {\n                            prevDate = date;\n                        }\n                        if (prevDate === date) {\n                            currentValue++;\n                            prevDate = date;\n                        } else {\n                            dataObj.x.push(prevDate);\n                            dataObj.y.push(currentValue);\n                            currentValue = 0;\n                        }\n                        prevDate = date;\n                    }\n                }\n                this.dataTest.push(dataObj);\n            }\n\n            // general\n\n            console.log(\"prepare new Data\");\n            let dataObj = {\n                x: [],\n                y: [],\n                type: \"bar\",\n                legend: true,\n                name: \"Gesamt\",\n            };\n            let currentValue = 0;\n            let prevDate = \"\";\n            let date = \"\";\n            for (let i = 0; i < this.msgData.length; i++) {\n                date = this.msgData[i].date;\n                if (i == 0) {\n                    prevDate = date;\n                }\n                if (prevDate === date) {\n                    currentValue++;\n                    prevDate = date;\n                } else {\n                    dataObj.x.push(prevDate);\n                    dataObj.y.push(currentValue);\n                    currentValue = 0;\n                }\n                prevDate = date;\n            }\n            this.dataTest.push(dataObj);\n            console.log(this.dataTest);\n        },\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.plot {\n    height: calc(100% - 50px);\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MsgOverTime.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MsgOverTime.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MsgOverTime.vue?vue&type=template&id=02ce13be&scoped=true&\"\nimport script from \"./MsgOverTime.vue?vue&type=script&lang=js&\"\nexport * from \"./MsgOverTime.vue?vue&type=script&lang=js&\"\nimport style0 from \"./MsgOverTime.vue?vue&type=style&index=0&id=02ce13be&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"02ce13be\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"test-plot\"},[_c('Plotly',{staticClass:\"plot\",attrs:{\"data\":_vm.dataTest,\"layout\":_vm.layout}}),_c('PlotButtons',{attrs:{\"buttons\":_vm.buttonsNames1}}),_c('PlotButtons',{attrs:{\"buttons\":_vm.buttonsNames2}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"test-plot\">\n        <Plotly class=\"plot\" :data=\"dataTest\" :layout=\"layout\" />\n        <PlotButtons :buttons=\"buttonsNames1\" />\n        <PlotButtons :buttons=\"buttonsNames2\" />\n    </div>\n</template>\n\n<script>\nimport { Plotly } from \"vue-plotly\";\nimport Vue from \"vue\";\nimport VuePapaParse from \"vue-papa-parse\";\nimport PlotButtons from \"../PlotButtons.vue\";\nVue.use(VuePapaParse);\n\nexport default {\n    components: {\n        Plotly,\n        PlotButtons,\n    },\n    name: \"MsgOverTime2\",\n    props: {\n        msgData: Array,\n        names: Array,\n        config: Object,\n    },\n    data() {\n        return {\n            showRelatice: true,\n            buttonsNames1: [\"hour\", \"minute\", \"second\"],\n            buttonsNames2: [\"absolute\", \"relative\"],\n            dataTest: [],\n            layout: {\n                title: \"Number of messages per hour\",\n                xaxis: {\n                    //autorange: true,\n                    //tickformat: \"%d/%m\",\n                },\n            },\n        };\n    },\n    mounted() {\n        this.prepareData();\n    },\n    watch: {\n        msgData() {\n            this.prepareData();\n        },\n        names() {\n            this.prepareData();\n        },\n    },\n    methods: {\n        prepareData: function () {\n            console.log(this.names, this.config);\n            if (this.msgData.length == 0) {\n                return;\n            }\n\n            this.dataTest = [];\n\n            // Each Name\n\n            for (let i = 0; i < this.names.length; i++) {\n                const nameTemp = this.names[i];\n                let dataObj = {\n                    x: [\n                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                        16, 17, 18, 19, 20, 21, 22, 23,\n                    ],\n                    y: [\n                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                        0, 0, 0, 0, 0,\n                    ],\n                    name: nameTemp,\n                };\n\n                for (let j = 0; j < this.msgData.length; j++) {\n                    if (this.msgData[j].name == nameTemp) {\n                        for (let k = 0; k < dataObj.x.length; k++) {\n                            if (\n                                dataObj.x[k] ==\n                                this.msgData[j].time.substring(0, 2)\n                            ) {\n                                dataObj.y[k]++;\n                            }\n                        }\n                    }\n                }\n                if (this.showRelatice) {\n                    for (let j = 0; j < dataObj.y.length; j++) {\n                        dataObj.y[j] =\n                            (100 / this.config.names[i].totalMsg) *\n                            dataObj.y[j];\n                    }\n                }\n                this.dataTest.push(dataObj);\n            }\n\n            let dataObj = {\n                x: [\n                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n                    17, 18, 19, 20, 21, 22, 23,\n                ],\n                y: [\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                    0, 0, 0, 0,\n                ],\n                name: \"Gesamt\",\n            };\n\n            for (let i = 0; i < this.msgData.length; i++) {\n                for (let j = 0; j < dataObj.x.length; j++) {\n                    if (dataObj.x[j] == this.msgData[i].time.substring(0, 2)) {\n                        dataObj.y[j]++;\n                    }\n                }\n            }\n\n            if (this.showRelatice) {\n                for (let i = 0; i < dataObj.y.length; i++) {\n                    dataObj.y[i] = (100 / this.config.totalMsg) * dataObj.y[i];\n                }\n            }\n\n            //let tempData = this.dataTest;\n            //this.dataTest = tempData;\n            this.dataTest.push(dataObj);\n        },\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.plot {\n    height: calc(100% - 100px);\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MsgOverTime2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MsgOverTime2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MsgOverTime2.vue?vue&type=template&id=6911141e&scoped=true&\"\nimport script from \"./MsgOverTime2.vue?vue&type=script&lang=js&\"\nexport * from \"./MsgOverTime2.vue?vue&type=script&lang=js&\"\nimport style0 from \"./MsgOverTime2.vue?vue&type=style&index=0&id=6911141e&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6911141e\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"test-plot\"},[_c('Plotly',{staticClass:\"plot\",attrs:{\"data\":_vm.dataTest,\"layout\":_vm.layout}}),_c('PlotButtons',{attrs:{\"buttons\":_vm.buttonsNames}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"test-plot\">\n        <Plotly class=\"plot\" :data=\"dataTest\" :layout=\"layout\" />\n        <PlotButtons :buttons=\"buttonsNames\" />\n    </div>\n</template>\n\n<script>\nimport { Plotly } from \"vue-plotly\";\nimport Vue from \"vue\";\nimport VuePapaParse from \"vue-papa-parse\";\nimport PlotButtons from \"../PlotButtons.vue\";\nVue.use(VuePapaParse);\n\nexport default {\n    components: {\n        Plotly,\n        PlotButtons,\n    },\n    name: \"MsgOverTime3\",\n    props: {\n        msgData: Array,\n        names: Array,\n    },\n    data() {\n        return {\n            buttonsNames: [\"absolute\", \"relative\"],\n            dataTest: [],\n            layout: {\n                title: \"Ratio of messages sent\",\n                xaxis: {\n                    //autorange: true,\n                    //tickformat: \"%d/%m\",\n                },\n            },\n        };\n    },\n    mounted() {\n        this.prepareData();\n    },\n    watch: {\n        msgData() {\n            this.prepareData();\n        },\n    },\n    methods: {\n        prepareData: function () {\n            this.dataTest = [];\n\n            let dataObj = {\n                labels: [],\n                values: [],\n                title: \"\",\n                type: \"pie\",\n                legend: true,\n            };\n            for (let i = 0; i < this.names.length; i++) {\n                dataObj.labels.push(this.names[i]);\n                dataObj.values.push(0);\n            }\n\n            for (let i = 0; i < this.msgData.length; i++) {\n                const nameTemp = this.msgData[i].name;\n                dataObj.values[this.names.indexOf(nameTemp)]++;\n            }\n\n            this.dataTest.push(dataObj);\n        },\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.plot {\n    height: calc(100% - 50px);\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MsgOverTime3.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MsgOverTime3.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MsgOverTime3.vue?vue&type=template&id=3c58144a&scoped=true&\"\nimport script from \"./MsgOverTime3.vue?vue&type=script&lang=js&\"\nexport * from \"./MsgOverTime3.vue?vue&type=script&lang=js&\"\nimport style0 from \"./MsgOverTime3.vue?vue&type=style&index=0&id=3c58144a&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3c58144a\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"test-plot\"},_vm._l((_vm.dataTest),function(obj){return _c('div',{key:obj.name},[_c('h1',[_vm._v(_vm._s(obj.name))]),_c('p',[_vm._v(\"Number of messages: \"+_vm._s(obj.numberMsg))]),_c('p',[_vm._v(\"Started conversations: \"+_vm._s(obj.startedConversation))]),_c('p',[_vm._v(\"Finished conversations: \"+_vm._s(obj.endedConversation))]),_c('p',[_vm._v(\"Average message length: \"+_vm._s(obj.msgLength))])])}),0)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"test-plot\">\n        <div v-for=\"obj in dataTest\" v-bind:key=\"obj.name\">\n            <h1>{{ obj.name }}</h1>\n            <p>Number of messages: {{ obj.numberMsg }}</p>\n            <p>Started conversations: {{ obj.startedConversation }}</p>\n            <p>Finished conversations: {{ obj.endedConversation }}</p>\n            <p>Average message length: {{ obj.msgLength }}</p>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport VuePapaParse from \"vue-papa-parse\";\nVue.use(VuePapaParse);\n\nexport default {\n    components: {},\n    name: \"MsgOverTime4\",\n    props: {\n        msgData: Array,\n        names: Array,\n    },\n    data() {\n        return {\n            timeBetweenConversations: 86400,\n            dataTest: [],\n            layout: {\n                title: \"Plot 4\",\n                xaxis: {\n                    //autorange: true,\n                    //tickformat: \"%d/%m\",\n                },\n            },\n        };\n    },\n    mounted() {\n        this.prepareData();\n    },\n    watch: {\n        msgData() {\n            this.prepareData();\n        },\n    },\n    methods: {\n        prepareData: function () {\n            this.dataTest = [];\n            let conversation = [];\n            for (let i = 0; i < this.names.length; i++) {\n                let convObj = {};\n                convObj.name = this.names[i];\n                convObj.startedConversation = 0;\n                convObj.endedConversation = 0;\n                conversation.push(convObj);\n            }\n            for (let j = 0; j < this.msgData.length; j++) {\n                if (j > 0) {\n                    if (\n                        this.msgData[j].timestamp >\n                        this.msgData[j - 1].timestamp +\n                            this.timeBetweenConversations\n                    ) {\n                        // started conversation\n                        conversation[this.names.indexOf(this.msgData[j].name)]\n                            .startedConversation++;\n                        // ended\n                        conversation[\n                            this.names.indexOf(this.msgData[j - 1].name)\n                        ].endedConversation++;\n                    }\n                } else {\n                    conversation[this.names.indexOf(this.msgData[j].name)]\n                        .startedConversation++;\n                }\n            }\n            for (let i = 0; i < this.names.length; i++) {\n                const name = this.names[i];\n                let dataObj = {};\n                dataObj.name = name;\n                dataObj.numberMsg = 0;\n                dataObj.msgLength = 0.0;\n                dataObj.startedConversation =\n                    conversation[i].startedConversation;\n                dataObj.endedConversation = conversation[i].endedConversation;\n                for (let j = 0; j < this.msgData.length; j++) {\n                    if (this.msgData[j].name == name) {\n                        dataObj.numberMsg++;\n                        dataObj.msgLength += this.msgData[j].msg.length;\n                    }\n                }\n\n                dataObj.msgLength = Math.round(\n                    dataObj.msgLength / dataObj.numberMsg\n                );\n                this.dataTest.push(dataObj);\n            }\n        },\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.plot {\n    height: calc(100% - 50px);\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MsgOverTime4.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MsgOverTime4.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MsgOverTime4.vue?vue&type=template&id=5634b325&scoped=true&\"\nimport script from \"./MsgOverTime4.vue?vue&type=script&lang=js&\"\nexport * from \"./MsgOverTime4.vue?vue&type=script&lang=js&\"\nimport style0 from \"./MsgOverTime4.vue?vue&type=style&index=0&id=5634b325&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5634b325\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"my_dataviz\"}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div id=\"my_dataviz\"></div>\n</template>\n\n<script>\n// eslint-disable-next-line\nimport * as d3 from \"d3\";\nexport default {\n    name: \"D3LineChart\",\n    components: {},\n    props: {\n        data: Object,\n    },\n    data() {\n        return {\n            dataObj: [\n                {\n                    date: \"1-May-12\",\n                    close: \"68.13\",\n                    open: \"34.12\",\n                },\n                {\n                    date: \"30-Apr-12\",\n                    close: \"63.98\",\n                    open: \"45.56\",\n                },\n                {\n                    date: \"27-Apr-12\",\n                    close: \"67.00\",\n                    open: \"67.89\",\n                },\n                {\n                    date: \"26-Apr-12\",\n                    close: \"89.70\",\n                    open: \"78.54\",\n                },\n                {\n                    date: \"25-Apr-12\",\n                    close: \"99.00\",\n                    open: \"89.23\",\n                },\n                {\n                    date: \"24-Apr-12\",\n                    close: \"130.28\",\n                    open: \"99.23\",\n                },\n            ],\n        };\n    },\n    mounted() {\n        this.prepareData();\n    },\n    watch: {\n        data() {\n            this.prepareData();\n        },\n    },\n    methods: {\n        /* eslint-disable */\n        prepareData: function () {\n            console.log(this.data);\n            if (!this.data.allMessages.length) return;\n            this.dataObj = [];\n            for (\n                let i = 0;\n                i < this.data.totalConfig.messagesPerTime.x.length;\n                i++\n            ) {\n                this.dataObj.push({\n                    time: this.data.totalConfig.messagesPerTime.x[i],\n                    number: this.data.totalConfig.messagesPerTime.y[i],\n                    name: \"Gesamt\",\n                });\n            }\n            for (let i = 0; i < this.data.configPerPersoan.length; i++) {\n                for (\n                    let j = 0;\n                    j < this.data.configPerPersoan[i].messagesPerTime.x.length;\n                    j++\n                ) {\n                    this.dataObj.push({\n                        time: this.data.configPerPersoan[i].messagesPerTime.x[\n                            i\n                        ],\n                        number: this.data.configPerPersoan[i].messagesPerTime.y[\n                            i\n                        ],\n                        name: this.data.names[i],\n                    });\n                }\n            }\n            this.init();\n        },\n        init: function () {\n            if (!this.data.allMessages.length) return;\n            console.log(this.dataObj);\n            var margin = { top: 20, right: 20, bottom: 30, left: 50 },\n                width = 960 - margin.left - margin.right,\n                height = 500 - margin.top - margin.bottom;\n\n            // parse the date / time\n            var parseTime = d3.timeParse(\"%d-%b-%y\");\n\n            // set the ranges\n            var x = d3.scaleLinear().range([0, width]);\n            var y = d3.scaleLinear().range([height, 0]);\n\n            // define the 1st line\n            var valueline = d3\n                .line()\n                .x(function (d) {\n                    return x(d.x);\n                })\n                .y(function (d) {\n                    return y(d.number);\n                });\n\n            // define the 2nd line\n\n            // append the svg obgect to the body of the page\n            // appends a 'group' element to 'svg'\n            // moves the 'group' element to the top left margin\n            var svg = d3\n                .select(\"#my_dataviz\")\n                .append(\"svg\")\n                .attr(\"width\", width + margin.left + margin.right)\n                .attr(\"height\", height + margin.top + margin.bottom)\n                .append(\"g\")\n                .attr(\n                    \"transform\",\n                    \"translate(\" + margin.left + \",\" + margin.top + \")\"\n                );\n\n            // Get the data\n            // format the data\n            /*\n            this.data.totalConfig.messagesPerTime.x.forEach(function (d) {\n                //d.x = +d.x;\n                //d.y = +d.y;\n            });\n            */\n\n            this.dataObj.forEach(function (d) {\n                d.x = +d.x;\n                d.number = +d.number;\n            });\n\n            // Scale the range of the data\n            x.domain([0, 23]);\n            y.domain([\n                0,\n                d3.max(this.dataObj, function (d) {\n                    return Math.max(0, d.number);\n                }),\n            ]);\n            /*\n\n            x.domain(\n                d3.extent(this.data.totalConfig.messagesPerTime, function (d) {\n                    return d.x;\n                })\n            );\n            y.domain([0, d3.max(23)]);\n            */\n\n            // Add the valueline path.\n\n            svg.append(\"path\")\n                .data([this.dataObj])\n                .attr(\"class\", \"line\")\n                .style(\"stroke\", \"blue\")\n                .attr(\"d\", valueline);\n\n            // Add the valueline2 path.\n\n            // Add the X Axis\n            svg.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(d3.axisBottom(x));\n\n            // Add the Y Axis\n            svg.append(\"g\").call(d3.axisLeft(y));\n        },\n    },\n};\n</script>\n<!-- css loaderhttps://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles -->\n<style></style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./D3LineChart.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./D3LineChart.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./D3LineChart.vue?vue&type=template&id=5847d0e6&\"\nimport script from \"./D3LineChart.vue?vue&type=script&lang=js&\"\nexport * from \"./D3LineChart.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{attrs:{\"id\":\"my_dataviz\"}})])}]\n\nexport { render, staticRenderFns }","<template>\n    <div>\n        <div id=\"my_dataviz\"></div>\n        <!-- <button @click=\"changeIndex()\">change Index</button> -->\n    </div>\n</template>\n\n<script>\n// eslint-disable-next-line\nimport * as d3 from \"d3\";\n\nexport default {\n    name: \"D3LineChartv2\",\n    components: {},\n    props: {\n        data: Object,\n    },\n    data() {\n        return {\n            plotData: [], // erster Index ist Lisa, Friedrich, Gesamt // Zweiter Index ist unvonverted, perDay, perMonth, perYear\n            starteDate: \"\",\n            endDate: \"\",\n            index: 1,\n            parseTime: d3.timeParse(\"%Y-%m-%d\"),\n            allCurveObjects: [],\n            curve: {},\n            svg: {},\n            xScale: {},\n            yScale: {},\n            width: 0,\n            height: 0,\n            margin: {},\n        };\n    },\n    mounted() {\n        this.prepareData2();\n    },\n    watch: {\n        data() {\n            this.prepareData2();\n        },\n    },\n    methods: {\n        changeIndex: function () {\n            if (this.index == 1) {\n                this.index = 2;\n            } else if (this.index == 2) {\n                this.index = 3;\n            } else {\n                this.index = 1;\n            }\n            //this.updateCurve();\n            //this.createPlot();\n            this.updateCurve();\n        },\n        updateCurve() {\n            //const xScale = this.xScale;\n            //const yScale = this.yScale;\n\n            // eslint-disable-next-line\n            const margin = this.margin;\n            const width = this.margin;\n            const height = this.margin;\n            //const height = this.margin;\n\n            let maxY = this.calculateMaxY(this.plotData[2][this.index]);\n\n            //const parseTime = this.parseTime;\n\n            let parseTime = this.parseTime;\n            if (this.index == 2) {\n                parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                parseTime = d3.timeParse(\"%Y\");\n            }\n            /*const u = this.svg\n                .selectAll(\".lineTest\")\n                .data([this.plotData[2][this.index]], function (d) {\n                    return d[0]; */\n\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            console.log(\n                \"Index: \",\n                this.index,\n                \" Startdatum: \",\n                this.starteDate,\n                \" Enddatum: \",\n                this.endDate\n            );\n\n            this.xScale\n                //.scaleTime()\n                //.domain([parseTime(\"2017-06-22\"), parseTime(\"2022-04-09\")])\n                .domain([\n                    this.parseTime(this.starteDate),\n                    this.parseTime(this.endDate),\n                ])\n                .range([0, width]);\n            this.yScale\n                //.scaleLinear()\n                .domain([0, maxY])\n                //.domain([0, 1000])\n                .range([height, 0]);\n\n            const xScale = this.xScale;\n            const yScale = this.yScale;\n\n            /*\n\n            this.xScale\n                //.transition()\n                //.duration(1000)\n                //.domain([parseTime(\"2017-06-22\"), parseTime(\"2022-04-09\")])\n                .domain([parseTime(this.starteDate), parseTime(this.endDate)])\n                .range([0, this.width]);\n\n            this.xScale = xScale;\n            */\n\n            //const parseTime = this.parseTime;\n            // svg, xScale, parseTime, yScale\n\n            this.curve\n                .datum(this.plotData[2][this.index])\n                .transition()\n                .duration(1000)\n                .attr(\n                    \"d\",\n                    d3\n                        .line()\n                        .curve(d3.curveBumpX)\n                        .x(function (d) {\n                            //console.log(parseTime(d[0]));\n                            return xScale(parseTime(d[0]));\n                        })\n                        .y(function (d) {\n                            return yScale(d[1]);\n                        })\n                );\n        },\n        prepareData2: function () {\n            if (!this.data.allMessages.length) return;\n            this.plotData = [];\n            const defaultPaerseTime = d3.timeParse(\"%Y-%m-%d\");\n\n            if (this.index == 2) {\n                this.parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                this.parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            }\n\n            for (let i = 0; i < this.data.names.length; i++) {\n                this.plotData.push([[], [], [], []]);\n            }\n\n            this.plotData.push([[], [], [], []]);\n\n            for (let i = 0; i < this.data.allMessages.length; i++) {\n                const name = this.data.allMessages[i].name;\n                // eslint-disable-next-line\n                const nameIndex = this.data.names.indexOf(name);\n\n                this.plotData[nameIndex][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n                this.plotData[this.data.names.length][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n            }\n\n            // Count Unvonverted, still stored as unconverted\n            for (let i = 0; i < this.plotData.length; i++) {\n                let updatedUnconverted = [];\n                let lastDate = \"\";\n                for (let j = 0; j < this.plotData[i][0].length; j++) {\n                    if (this.plotData[i][0][j][0] != lastDate) {\n                        lastDate = this.plotData[i][0][j][0];\n                        updatedUnconverted.push([lastDate, 1]);\n                    } else {\n                        lastDate = this.plotData[i][0][j][0];\n                        const lastvalue =\n                            updatedUnconverted[\n                                updatedUnconverted.length - 1\n                            ][1];\n                        updatedUnconverted[updatedUnconverted.length - 1] = [\n                            lastDate,\n                            lastvalue + 1,\n                        ];\n                    }\n                }\n                this.plotData[i][0] = updatedUnconverted;\n            }\n\n            // per Day\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n\n                const allDates = [];\n                for (let j = 0; j < this.plotData[i][0].length; j++) {\n                    allDates.push(this.plotData[i][0][j][0]);\n                }\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    const date = new Date(j).toISOString().split(\"T\")[0];\n                    if (allDates.includes(date)) {\n                        const dateIndex = allDates.indexOf(date);\n                        this.plotData[i][1].push([\n                            this.plotData[i][0][dateIndex][0],\n                            this.plotData[i][0][dateIndex][1],\n                        ]);\n                    } else {\n                        this.plotData[i][1].push([date, 0]);\n                    }\n                }\n            }\n\n            // per month\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n                const allMonth = []; // 2015-06\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    const month = new Date(j).toISOString().substring(0, 7);\n                    if (!allMonth.includes(month)) {\n                        allMonth.push(month);\n                        this.plotData[i][2].push([month, 0]);\n                    }\n                }\n                for (let j = 0; j < this.plotData[i][0].length; j = j + 12) {\n                    const month = this.plotData[i][0][j][0].substring(0, 7);\n                    const value = this.plotData[i][0][j][1];\n                    const monthIndex = allMonth.indexOf(month);\n                    this.plotData[i][2][monthIndex][1] =\n                        this.plotData[i][2][monthIndex][1] + value;\n                }\n            }\n            // per month\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n                const allYears = []; // 2015\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    const year = new Date(j).toISOString().substring(0, 4);\n                    if (!allYears.includes(year)) {\n                        allYears.push(year);\n                        this.plotData[i][3].push([year, 0]);\n                    }\n                }\n                for (let j = 0; j < this.plotData[i][0].length; j = j + 1) {\n                    const year = this.plotData[i][0][j][0].substring(0, 4);\n                    const value = this.plotData[i][0][j][1];\n                    const yearIndex = allYears.indexOf(year);\n                    this.plotData[i][3][yearIndex][1] =\n                        this.plotData[i][3][yearIndex][1] + value;\n                }\n            }\n\n            this.createPlot();\n        },\n        createPlot: function () {\n            // eslint-disable-next-line\n            const parseTime = this.parseTime;\n            // eslint-disable-next-line\n            let maxY = this.calculateMaxY(this.plotData[2][this.index]);\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            const margin = { top: 50, right: 50, bottom: 50, left: 50 };\n            const width = 1060 - margin.left - margin.right;\n            const height = 400 - margin.top - margin.bottom;\n\n            this.width = width;\n            this.height = height;\n            this.margin = margin;\n\n            // Steo 2: Layout\n            // = var svg...\n            this.svg = d3\n                .select(\"#my_dataviz\")\n                .append(\"svg\")\n                .attr(\"width\", width + margin.left + margin.right)\n                .attr(\"margin\", 40)\n                .attr(\"height\", height + margin.top + margin.bottom)\n                .append(\"g\")\n                .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n            // Step 3: Set scale\n\n            const xScale = d3\n                .scaleTime()\n                //.domain([parseTime(\"2017-06-22\"), parseTime(\"2022-04-09\")])\n                .domain([\n                    this.parseTime(this.starteDate),\n                    this.parseTime(this.endDate),\n                ])\n                .range([0, width]);\n            const yScale = d3\n                .scaleLinear()\n                .domain([0, maxY])\n                //.domain([0, 1000])\n                .range([height, 0]);\n\n            this.xScale = xScale;\n            this.yScale = yScale;\n\n            var g = this.svg\n                .append(\"g\")\n                //.attr(\"transform\", \"translate(\" + 100 + \",\" + 100 + \")\");\n                .attr(\"transform\", \"translate(\" + 0 + \",\" + 0 + \")\");\n\n            // Step 4: Add text\n\n            // Title\n\n            /*\n                svg.append(\"text\")\n                //.attr(\"x\", width / 2 + 100)\n                //.attr(\"y\", 0)\n                .attr(\"y\", 100)\n                .attr(\"text-anchor\", \"middle\")\n                .style(\"font-family\", \"Helvetica\")\n                .style(\"font-size\", 20)\n                .text(\"Line Chart\");\n\n                // X label\n                svg.append(\"text\")\n                //.attr(\"x\", width / 2 + 100)\n                //.attr(\"y\", height - 15 + 150)\n                .attr(\"text-anchor\", \"middle\")\n                .style(\"font-family\", \"Helvetica\")\n                .style(\"font-size\", 12)\n                .text(\"Independant\");\n\n                // Y label\n                svg.append(\"text\")\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"transform\", \"translate(60,\" + height + \")rotate(-90)\")\n                .style(\"font-family\", \"Helvetica\")\n                .style(\"font-size\", 12)\n                .text(\"Dependant\");\n                */\n\n            // Step 5: Add axis\n\n            g.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(d3.axisBottom(xScale));\n\n            g.append(\"g\").call(d3.axisLeft(yScale));\n\n            // Step 6: Scatter dots\n\n            /*\n                svg.append(\"g\")\n                .selectAll(\"dot\")\n                .data(this.completeNewData[2][2])\n                //.data(this.plotData2[0].perDay)\n                .enter()\n                .append(\"circle\")\n                .attr(\"cx\", function (d) {\n                    return xScale(parseTime(d[0]));\n                })\n                .attr(\"cy\", function (d) {\n                    return yScale(d[1]);\n                })\n                .attr(\"r\", 2)\n                //.attr(\"transform\", \"translate(\" + 100 + \",\" + 100 + \")\")\n                .attr(\"transform\", \"translate(\" + 0 + \",\" + 0 + \")\")\n                .style(\"fill\", \"#CC0000\");\n                */\n\n            // Step 7: Plot Line\n            // eslint-disable-next-line\n\n            this.curve = this.svg\n                .append(\"g\")\n                .append(\"path\")\n                .attr(\"class\", \"mypath\")\n                .datum(this.plotData[2][this.index])\n                .attr(\n                    \"d\",\n                    d3\n                        .line()\n                        .curve(d3.curveBumpX)\n                        .x(function (d) {\n                            return xScale(parseTime(d[0]));\n                        })\n                        .y(function (d) {\n                            return yScale(d[1]);\n                        })\n                )\n                .style(\"fill\", \"none\")\n                .style(\"stroke\", \"#CC0000\")\n                .style(\"stroke-width\", \"2\");\n            // eslint-disable-next-line\n\n            /*\n        \n\n            \n\n            var line = d3\n                .line()\n                .x(function (d) {\n                    return xScale(parseTime(d[0]));\n                })\n                .y(function (d) {\n                    return yScale(d[1]);\n                })\n                .curve(d3.curveBumpX);\n\n            // eslint-disable-next-line\n            svg.append(\"path\")\n                .datum(this.plotData[2][this.index])\n                //.datum(this.plotData2[0].perDay)\n                .attr(\"class\", \"line\")\n                //.attr(\"transform\", \"translate(\" + 100 + \",\" + 100 + \")\")\n                .attr(\"transform\", \"translate(\" + 0 + \",\" + 0 + \")\")\n                .attr(\"d\", line)\n                .style(\"fill\", \"none\")\n                .style(\"stroke\", \"#CC0000\")\n                .style(\"stroke-width\", \"2\");\n\n                */\n\n            // MOUSE\n        },\n        calculateMaxY: function (array) {\n            let max = 0;\n            for (let i = 0; i < array.length; i++) {\n                if (array[i][1] > max) {\n                    max = array[i][1];\n                }\n            }\n            if (max < 10) {\n                max = 10;\n            } else if (max < 100) {\n                let modulo = max % 10;\n                max = max - modulo + 10;\n            } else if (max < 500) {\n                let modulo = max % 100;\n                max = max - modulo + 100;\n            } else if (max < 1000) {\n                let modulo = max % 200;\n                max = max - modulo + 200;\n            } else if (max < 10000) {\n                let modulo = max % 500;\n                max = max - modulo + 500;\n            }\n            return max;\n        },\n    },\n};\n</script>\n<!-- css loaderhttps://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles -->\n<style>\n/* AXES */\n/* ticks */\n.axis line {\n    stroke: #706f6f;\n    stroke-width: 0.5;\n    shape-rendering: crispEdges;\n}\n\n/* axis contour */\n.axis path {\n    stroke: #706f6f;\n    stroke-width: 0.7;\n    shape-rendering: crispEdges;\n}\n\n/* axis text */\n.axis text {\n    fill: #2b2929;\n    font-family: Georgia;\n    font-size: 120%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./D3LineChartv2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./D3LineChartv2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./D3LineChartv2.vue?vue&type=template&id=7b7185ec&\"\nimport script from \"./D3LineChartv2.vue?vue&type=script&lang=js&\"\nexport * from \"./D3LineChartv2.vue?vue&type=script&lang=js&\"\nimport style0 from \"./D3LineChartv2.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":_vm.classID + '-container'}},[_c('div',{attrs:{\"id\":_vm.classID + '-title'}},[_vm._v(\" Number Of Messages per \"+_vm._s(this.indexName[this.index - 1])+\" \")]),_c('div',{attrs:{\"id\":_vm.classID}}),_c('div',{staticClass:\"buttons\"},[_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(3)}}},[_vm._v(\"Year\")]),_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(2)}}},[_vm._v(\"Month\")]),_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(1)}}},[_vm._v(\"Days\")]),_c('input',{attrs:{\"type\":\"date\",\"id\":\"start\",\"name\":\"trip-start\",\"min\":_vm.starteDate,\"max\":_vm.endDate},domProps:{\"value\":_vm.starteDate}}),_c('input',{attrs:{\"type\":\"date\",\"id\":\"end\",\"name\":\"trip-end\",\"min\":_vm.starteDate,\"max\":_vm.endDate},domProps:{\"value\":_vm.endDate}})])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div :id=\"classID + '-container'\">\n        <div :id=\"classID + '-title'\">\n            Number Of Messages per {{ this.indexName[this.index - 1] }}\n        </div>\n        <div :id=\"classID\"></div>\n        <div class=\"buttons\">\n            <div @click=\"changeIndex2(3)\" class=\"single-button\">Year</div>\n            <div @click=\"changeIndex2(2)\" class=\"single-button\">Month</div>\n            <div @click=\"changeIndex2(1)\" class=\"single-button\">Days</div>\n            <input\n                type=\"date\"\n                id=\"start\"\n                name=\"trip-start\"\n                :value=\"starteDate\"\n                :min=\"starteDate\"\n                :max=\"endDate\"\n            />\n            <input\n                type=\"date\"\n                id=\"end\"\n                name=\"trip-end\"\n                :value=\"endDate\"\n                :min=\"starteDate\"\n                :max=\"endDate\"\n            />\n        </div>\n    </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport { interpolatePath } from \"d3-interpolate-path\";\n\nexport default {\n    name: \"Plot-1\",\n    components: {},\n    props: {\n        data: Object,\n        globalWidth: Number,\n        classIDProp: String,\n    },\n    data() {\n        return {\n            plotData: [], // erster Index ist Lisa, Friedrich, Gesamt // Zweiter Index ist unvonverted, perDay, perMonth, perYear\n            starteDate: \"\",\n            endDate: \"\",\n            index: 3,\n            parseTime: d3.timeParse(\"%Y-%m-%d\"),\n            allCurveObjects: [],\n            curve: {},\n            svg: {},\n            xScale: {},\n            yScale: {},\n            x: {},\n            y: {},\n            xAxis: {},\n            yAxis: {},\n            focus: {},\n            margin: { top: 20, right: 30, bottom: 30, left: 50 },\n            width: 876 - 100,\n            //width: 576 - 100,\n            height: 350,\n            indexName: [\"Day\", \"Month\", \"Year\"],\n            classNames: [],\n            classNamesDot: [],\n            lineObjects: [],\n            colors: [\n                \"red\",\n                \"green\",\n                \"blue\",\n                \"black\",\n                \"brown\",\n                \"coral\",\n                \"darkblue\",\n                \"orange\",\n                \"darkorange\",\n                \"darkviolet\",\n                \"indigo\",\n                \"lightsalmon\",\n                \"midnightblue\",\n                \"red\",\n                \"green\",\n                \"blue\",\n                \"black\",\n                \"brown\",\n                \"coral\",\n                \"darkblue\",\n                \"orange\",\n                \"darkorange\",\n                \"darkviolet\",\n                \"indigo\",\n                \"lightsalmon\",\n                \"midnightblue\",\n                \"red\",\n                \"green\",\n                \"blue\",\n                \"black\",\n                \"brown\",\n                \"coral\",\n                \"darkblue\",\n                \"orange\",\n                \"darkorange\",\n                \"darkviolet\",\n                \"indigo\",\n                \"lightsalmon\",\n                \"midnightblue\",\n            ],\n            size: true,\n            classID: \"plot-1\",\n        };\n    },\n    mounted() {\n        this.classNames = this.classNames.map(\n            (el) => this.classIDProp + \"-\" + el\n        );\n        this.classID = this.classIDProp;\n        window.addEventListener(\"resize\", this.myEventHandler);\n        this.getStartWidth();\n        this.createClassArrays();\n        this.prepareData2();\n    },\n    watch: {\n        data() {\n            this.createClassArrays();\n            this.prepareData2();\n        },\n        globalWidth: function () {\n            this.switchSize();\n        },\n    },\n    methods: {\n        // Wofür wird das benötigt?\n        createClassArrays: function () {\n            this.classNames = [];\n            this.classNamesDot = [];\n            for (let i = 0; i <= this.data.names.length; i++) {\n                const index = (i + 1).toString();\n                this.classNames.push(\"line-\" + index);\n                this.classNamesDot.push(\".line\" + index);\n            }\n        },\n        getStartWidth: async function () {\n            this.width =\n                document.querySelector(\"#grid-\" + this.classID).clientWidth -\n                (this.margin.left + this.margin.right);\n        },\n        myEventHandler: function () {\n            // eslint-disable-next-line\n            const widthPlot1 =\n                document.querySelector(\"#grid-\" + this.classID).clientWidth -\n                (this.margin.left + this.margin.right);\n            if (this.width != widthPlot1) {\n                this.width = widthPlot1;\n            }\n        },\n        changeIndex2: function (index) {\n            this.index = index;\n            this.updateCurve();\n        },\n        switchSize: function () {\n            if (this.globalWidth > 0) {\n                this.width = this.globalWidth + 100;\n            }\n            this.changeSize();\n        },\n        changeSize: function () {\n            d3.select(\".plot1svg\").attr(\n                \"width\",\n                this.width + this.margin.left + this.margin.right\n            );\n        },\n        prepareData2: function () {\n            if (!this.data.allMessages.length) return;\n            this.plotData = [];\n            const defaultPaerseTime = d3.timeParse(\"%Y-%m-%d\");\n\n            if (this.index == 2) {\n                this.parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                this.parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            }\n\n            for (let i = 0; i < this.data.names.length; i++) {\n                this.plotData.push([[], [], [], [], []]);\n            }\n\n            this.plotData.push([[], [], [], [], []]);\n\n            for (let i = 0; i < this.data.allMessages.length; i++) {\n                const name = this.data.allMessages[i].name;\n                const nameIndex = this.data.names.indexOf(name);\n\n                this.plotData[nameIndex][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n                this.plotData[this.data.names.length][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n            }\n\n            // Count Unvonverted, still stored as unconverted\n            for (let i = 0; i < this.plotData.length; i++) {\n                let updatedUnconverted = [];\n                let lastDate = \"\";\n                for (let j = 0; j < this.plotData[i][0].length; j++) {\n                    if (this.plotData[i][0][j][0] != lastDate) {\n                        lastDate = this.plotData[i][0][j][0];\n                        updatedUnconverted.push([lastDate, 1]);\n                    } else {\n                        lastDate = this.plotData[i][0][j][0];\n                        const lastvalue =\n                            updatedUnconverted[\n                                updatedUnconverted.length - 1\n                            ][1];\n                        updatedUnconverted[updatedUnconverted.length - 1] = [\n                            lastDate,\n                            lastvalue + 1,\n                        ];\n                    }\n                }\n                this.plotData[i][0] = updatedUnconverted;\n            }\n\n            // per Day\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n\n                const allDates = [];\n                for (let j = 0; j < this.plotData[i][0].length; j++) {\n                    allDates.push(this.plotData[i][0][j][0]);\n                }\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    const date = new Date(j).toISOString().split(\"T\")[0];\n                    if (allDates.includes(date)) {\n                        const dateIndex = allDates.indexOf(date);\n                        this.plotData[i][1].push([\n                            this.plotData[i][0][dateIndex][0],\n                            this.plotData[i][0][dateIndex][1],\n                        ]);\n                    } else {\n                        this.plotData[i][1].push([date, 0]);\n                    }\n                }\n            }\n\n            // per month\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n                const allMonth = []; // 2015-06\n                let daysPerMonth = [];\n                let daysPerMonthValue = [];\n\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    // add \"empty\" months\n                    const month = new Date(j).toISOString().substring(0, 7);\n                    if (!allMonth.includes(month)) {\n                        allMonth.push(month);\n                        this.plotData[i][2].push([month, 0]);\n                        daysPerMonth.push(month);\n                        daysPerMonthValue.push(0);\n                    }\n                    const countIndex = daysPerMonth.indexOf(month);\n                    daysPerMonthValue[countIndex]++;\n                }\n                // loop throu all days\n                for (let j = 0; j < this.plotData[i][0].length; j = j + 1) {\n                    const month = this.plotData[i][0][j][0].substring(0, 7);\n                    const value = this.plotData[i][0][j][1];\n                    const monthIndex = allMonth.indexOf(month);\n\n                    this.plotData[i][2][monthIndex][1] =\n                        this.plotData[i][2][monthIndex][1] + value;\n                }\n\n                for (let j = 0; j < this.plotData[i][2].length; j = j + 1) {\n                    const month = this.plotData[i][2][j][0];\n                    const value = this.plotData[i][2][j][1];\n                    const monthIndex = daysPerMonth.indexOf(month);\n                    const days = daysPerMonthValue[monthIndex];\n                    if (value != 0) {\n                        this.plotData[i][2][j][1] = value / days;\n                    }\n                }\n            }\n\n            // per year\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n                const allYears = []; // 2015\n                let daysPerYear = [];\n                let daysPerYearValue = [];\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    const year = new Date(j).toISOString().substring(0, 4);\n                    if (!allYears.includes(year)) {\n                        allYears.push(year);\n                        this.plotData[i][3].push([year, 0]);\n                        daysPerYear.push(year);\n                        daysPerYearValue.push(0);\n                    }\n                    const countIndex = daysPerYear.indexOf(year);\n                    daysPerYearValue[countIndex]++;\n                }\n                for (let j = 0; j < this.plotData[i][0].length; j = j + 1) {\n                    const year = this.plotData[i][0][j][0].substring(0, 4);\n                    const value = this.plotData[i][0][j][1];\n                    const yearIndex = allYears.indexOf(year);\n                    this.plotData[i][3][yearIndex][1] =\n                        this.plotData[i][3][yearIndex][1] + value;\n                }\n                for (let j = 0; j < this.plotData[i][3].length; j = j + 1) {\n                    const year = this.plotData[i][3][j][0];\n                    const value = this.plotData[i][3][j][1];\n                    const yearIndex = daysPerYear.indexOf(year);\n                    const days = daysPerYearValue[yearIndex];\n                    if (value != 0) {\n                        this.plotData[i][3][j][1] = value / days;\n                    }\n                }\n            }\n\n            for (let i = 0; i < this.plotData.length; i++) {\n                for (let j = 0; j < this.plotData[i][3].length; j++) {\n                    this.plotData[i][4].push([\n                        this.plotData[i][3][j][0],\n                        this.plotData[i][3][j][1] *\n                            (Math.random() * (3 - 0.5) + 0.5),\n                    ]);\n                }\n            }\n\n            console.log(this.plotData);\n\n            this.createPlot();\n        },\n        createPlot: function () {\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            // svg\n            d3.select(\"#\" + this.classID + \"-svg\").remove();\n\n            const svg = d3\n                .select(\"#\" + this.classID)\n                .append(\"svg\")\n                //.attr(\"class\", this.classID + \"-svg\")\n                .attr(\"id\", this.classID + \"-svg\")\n                .attr(\n                    \"width\",\n                    this.width + this.margin.left + this.margin.right\n                )\n                .attr(\n                    \"height\",\n                    this.height + this.margin.top + this.margin.bottom\n                )\n                .append(\"g\")\n                .attr(\n                    \"transform\",\n                    `translate(${this.margin.left},${this.margin.top})`\n                );\n\n            const x = d3.scaleTime().range([0, this.width]);\n            const xAxis = d3.axisBottom().scale(x);\n\n            // myXaxis -> plot-1-x-axis\n            svg.append(\"g\")\n                .attr(\"transform\", `translate(0, ${this.height})`)\n                .attr(\"id\", this.classID + \"-x-axis\");\n\n            const y = d3.scaleLinear().range([this.height, 0]);\n            const yAxis = d3.axisLeft().scale(y);\n            svg.append(\"g\")\n                //.attr(\"class\", \"myYaxis\")\n                .attr(\"id\", this.classID + \"-y-axis\");\n\n            svg.append(\"text\")\n                .attr(\"id\", this.classID + \"-y-label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"y\", \"-35px\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            this.x = x;\n            this.y = y;\n            this.xAxis = xAxis;\n            this.yAxis = yAxis;\n            this.svg = svg;\n            this.focus = focus;\n\n            this.setInitalLine();\n        },\n        setInitalLine() {\n            let maxY = 0;\n            for (let i = 0; i <= this.data.names.length; i++) {\n                maxY =\n                    this.calculateMaxY(this.plotData[i][this.index]) > maxY\n                        ? this.calculateMaxY(this.plotData[i][this.index])\n                        : maxY;\n            }\n\n            let parseTime = this.parseTime;\n            if (this.index == 2) {\n                parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                parseTime = d3.timeParse(\"%Y\");\n            }\n\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            this.x.domain([\n                parseTime(this.starteDate),\n                parseTime(this.endDate),\n            ]);\n            this.svg.selectAll(\"#\" + this.classID + \"-x-axis\").call(this.xAxis);\n\n            // create the Y axis\n            this.y.domain([0, maxY]).nice();\n            this.svg.select(\"#\" + this.classID + \"-y-axis\").call(this.yAxis);\n\n            this.svg\n                .select(\"#\" + this.classID + \"-y-label\")\n                .text(\"Average Messages Per \" + this.indexName[this.index - 1]);\n\n            const x = this.x;\n            // eslint-disable-next-line\n            const y = this.y;\n            const height = this.height;\n\n            const line = d3\n                .line()\n                .curve(d3.curveBumpX)\n                .x(function (d) {\n                    return x(parseTime(d[0]));\n                })\n                // eslint-disable-next-line\n                .y(function (d) {\n                    return height;\n                });\n\n            this.lineObjects = [];\n\n            for (let i = 0; i < this.classNames.length; i++) {\n                this.lineObjects.push(\n                    this.svg\n                        .selectAll(\".\" + this.classNames[i])\n                        .data([this.plotData[i][this.index]], function (d) {\n                            return parseTime(d[0]);\n                        })\n                );\n            }\n\n            //const classNames = this.classNames;\n\n            for (let i = 0; i < this.lineObjects.length; i++) {\n                this.lineObjects[i]\n                    .join(\"path\")\n                    .attr(\"class\", this.classNames[i])\n                    .merge(this.lineObjects[i])\n                    .attr(\"d\", function (d) {\n                        return line(d);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", this.colors[i])\n                    .style(\"stroke-width\", \"2\");\n            }\n            this.updateCurve();\n        },\n        updateCurve() {\n            let maxY = 0;\n            for (let i = 0; i <= this.data.names.length; i++) {\n                maxY =\n                    this.calculateMaxY(this.plotData[i][this.index]) > maxY\n                        ? this.calculateMaxY(this.plotData[i][this.index])\n                        : maxY;\n            }\n\n            let parseTime = this.parseTime;\n            if (this.index == 2) {\n                parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                parseTime = d3.timeParse(\"%Y\");\n            }\n\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            this.x.domain([\n                parseTime(this.starteDate),\n                parseTime(this.endDate),\n            ]);\n            this.svg\n                .selectAll(\"#\" + this.classID + \"-x-axis\")\n                .transition()\n                .duration(1000)\n                .call(this.xAxis);\n\n            /*\n            this.svg\n                .append(\"text\")\n                .attr(\"class\", \"x label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\", this.width)\n                .attr(\"y\", this.height - 6)\n                .text(\"x-Achse\");\n            */\n\n            // create the Y axis\n            this.y.domain([0, maxY]).nice();\n            this.svg\n                .select(\"#\" + this.classID + \"-y-axis\")\n                .transition()\n                .duration(1000)\n                .call(this.yAxis);\n\n            this.svg\n                .select(\"#\" + this.classID + \"-y-label\")\n                .transition()\n                .duration(1000)\n                //.text(\"Average Messages Per \" + this.indexName[this.index - 1]);\n                .text(\"Average Messages Per Day\");\n\n            // this.indexName[this.index - 1].charAt(0).toUpperCase() + this.indexName[this.index - 1].slice(1)\n            //.text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            //this.svg.select(\"title\").text(\"NEUN\");\n\n            const x = this.x;\n            const y = this.y;\n\n            const line = d3\n                .line()\n                .curve(d3.curveBumpX)\n                .x(function (d) {\n                    return x(parseTime(d[0]));\n                })\n                .y(function (d) {\n                    return y(d[1]);\n                });\n\n            this.lineObjects = [];\n\n            for (let i = 0; i < this.classNames.length; i++) {\n                this.lineObjects.push(\n                    this.svg\n                        .selectAll(\".\" + this.classNames[i])\n                        .data([this.plotData[i][this.index]], function (d) {\n                            return parseTime(d[0]);\n                        })\n                );\n            }\n\n            const classNames = this.classNames;\n            //const classID = this.classID;\n\n            for (let i = 0; i < this.lineObjects.length; i++) {\n                this.lineObjects[i]\n                    .join(\"path\")\n                    .attr(\"class\", this.classNames[i])\n                    .merge(this.lineObjects[i])\n                    .transition()\n                    .duration(1000)\n                    .attrTween(\"d\", function (d) {\n                        var previous = d3.select(\".\" + classNames[i]).attr(\"d\");\n                        //previous.attr(\"d\");\n                        var current = line(d);\n                        return interpolatePath(previous, current);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", this.colors[i])\n                    .style(\"stroke-width\", \"2\");\n            }\n        },\n        calculateMaxY: function (array) {\n            let max = 0;\n            for (let i = 0; i < array.length; i++) {\n                if (array[i][1] > max) {\n                    max = array[i][1];\n                }\n            }\n            if (max < 3) {\n                max = 3;\n            } else if (max < 5) {\n                max = 5;\n            } else if (max < 10) {\n                max = 10;\n            } else if (max < 100) {\n                let modulo = max % 10;\n                max = max - modulo + 10;\n            } else if (max < 500) {\n                let modulo = max % 100;\n                max = max - modulo + 100;\n            } else if (max < 1000) {\n                let modulo = max % 200;\n                max = max - modulo + 200;\n            } else if (max < 10000) {\n                let modulo = max % 500;\n                max = max - modulo + 500;\n            }\n            return max;\n        },\n        focusMouseOver: function () {\n            //console.log(\"DRIN\");\n        },\n        focusMouseMove: function () {\n            //console.log(\"BEWEGUNG!\");\n        },\n        focusMouseOut: function () {\n            //console.log(\"DRAUSSEN\");\n        },\n        /*\n        mousemove: function () {\n            var x0 = x.invert(d3.mouse(this)[0]),\n                i = bisectDate(data, x0, 1),\n                d0 = data[i - 1],\n                d1 = data[i],\n                d = x0 - d0.date > d1.date - x0 ? d1 : d0;\n            this.focus.attr(\n                \"transform\",\n                \"translate(\" + x(d.date) + \",\" + y(d.likes) + \")\"\n            );\n            this.focus.select(\".tooltip-date\").text(dateFormatter(d.date));\n            this.focus.select(\".tooltip-likes\").text(formatValue(d.likes));\n        },\n        */\n    },\n};\n</script>\n<!-- css loaderhttps://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles -->\n<style>\n/* AXES */\n/* ticks */\n\n/* STYLE BUTTONS */\n\n/* title */\n.title {\n    font-size: 100px;\n    text-anchor: middle;\n}\n\n.myXaxis,\n.myYaxis,\n#plot-1-x-axis,\n#plot-1-y-axis,\n#plot-2-x-axis,\n#plot-2-y-axis {\n    color: #000;\n}\n\n#plot-1-y-label,\n#plot-2-y-label {\n    font-size: 1rem;\n}\n\n.single-button {\n    font-size: 1.5rem;\n    color: #000;\n    float: left;\n    margin-right: 15px;\n}\n\n.single-button:last-child {\n    margin-right: 0px;\n}\n\n.buttons {\n    height: 40px;\n    width: max-content;\n    margin: auto;\n}\n\n/*\n#my_dataviz2 {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n}\n*/\n\n.plot1svg {\n    width: 100%;\n    margin: auto;\n}\n\n#plot-1-title,\n#plot-2-title {\n    margin: auto;\n    font-size: 1.5rem;\n    height: 40px;\n    color: #000;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Plot1.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Plot1.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Plot1.vue?vue&type=template&id=05877e63&\"\nimport script from \"./Plot1.vue?vue&type=script&lang=js&\"\nexport * from \"./Plot1.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Plot1.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":_vm.classID + '-container'}},[_c('div',{attrs:{\"id\":_vm.classID + '-title'}},[_vm._v(\"Number Of Messages Per Hour\")]),_c('div',{attrs:{\"id\":_vm.classID}}),_c('div',{staticClass:\"buttons\"},[_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(5)}}},[_vm._v(\"Hour\")]),_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(6)}}},[_vm._v(\"Minute\")]),_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(7)}}},[_vm._v(\"Weekday\")]),_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(8)}}},[_vm._v(\"Month\")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div :id=\"classID + '-container'\">\n        <div :id=\"classID + '-title'\">Number Of Messages Per Hour</div>\n        <div :id=\"classID\"></div>\n        <div class=\"buttons\">\n            <div @click=\"changeIndex2(5)\" class=\"single-button\">Hour</div>\n            <div @click=\"changeIndex2(6)\" class=\"single-button\">Minute</div>\n            <div @click=\"changeIndex2(7)\" class=\"single-button\">Weekday</div>\n            <div @click=\"changeIndex2(8)\" class=\"single-button\">Month</div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport { interpolatePath } from \"d3-interpolate-path\";\n\nexport default {\n    name: \"Plot-2\",\n    components: {},\n    props: {\n        data: Object,\n        globalWidth: Number,\n        classIDProp: String,\n    },\n    data() {\n        return {\n            plotData: [], // erster Index ist Lisa, Friedrich, Gesamt // Zweiter Index ist unvonverted, perDay, perMonth, perYear\n            starteDate: \"\",\n            endDate: \"\",\n            index: 5,\n            parseTime: d3.timeParse(\"%Y-%m-%d\"),\n            allCurveObjects: [],\n            curve: {},\n            svg: {},\n            xScale: {},\n            yScale: {},\n            x: {},\n            y: {},\n            xAxis: {},\n            yAxis: {},\n            focus: {},\n            margin: { top: 20, right: 30, bottom: 30, left: 50 },\n            width: 876 - 100,\n            //width: 576 - 100,\n            height: 350,\n            indexName: [\"Day\", \"Month\", \"Year\"],\n            classNames: [],\n            classNamesDot: [],\n            lineObjects: [],\n            colors: [\n                \"red\",\n                \"green\",\n                \"blue\",\n                \"black\",\n                \"brown\",\n                \"coral\",\n                \"darkblue\",\n                \"orange\",\n                \"darkorange\",\n                \"darkviolet\",\n                \"indigo\",\n                \"lightsalmon\",\n                \"midnightblue\",\n                \"red\",\n                \"green\",\n                \"blue\",\n                \"black\",\n                \"brown\",\n                \"coral\",\n                \"darkblue\",\n                \"orange\",\n                \"darkorange\",\n                \"darkviolet\",\n                \"indigo\",\n                \"lightsalmon\",\n                \"midnightblue\",\n                \"red\",\n                \"green\",\n                \"blue\",\n                \"black\",\n                \"brown\",\n                \"coral\",\n                \"darkblue\",\n                \"orange\",\n                \"darkorange\",\n                \"darkviolet\",\n                \"indigo\",\n                \"lightsalmon\",\n                \"midnightblue\",\n            ],\n            size: true,\n            classID: \"plot-1\",\n        };\n    },\n    mounted() {\n        this.classNames = this.classNames.map(\n            (el) => this.classIDProp + \"-\" + el\n        );\n        this.classID = this.classIDProp;\n        window.addEventListener(\"resize\", this.myEventHandler);\n        this.getStartWidth();\n        this.createClassArrays();\n        this.prepareData2();\n    },\n    watch: {\n        data() {\n            this.createClassArrays();\n            this.prepareData2();\n        },\n        globalWidth: function () {\n            this.switchSize();\n        },\n    },\n    methods: {\n        createClassArrays: async function () {\n            this.classNames = [];\n            this.classNamesDot = [];\n            for (let i = 0; i < this.data.names.length; i++) {\n                const index = (i + 1).toString();\n                this.classNames.push(\"line-\" + index);\n                this.classNamesDot.push(\".line\" + index);\n            }\n        },\n        getStartWidth: async function () {\n            this.width =\n                document.querySelector(\"#grid-\" + this.classID).clientWidth -\n                (this.margin.left + this.margin.right);\n        },\n        myEventHandler: function () {\n            // eslint-disable-next-line\n            const widthPlot1 =\n                document.querySelector(\"#grid-\" + this.classID).clientWidth -\n                (this.margin.left + this.margin.right);\n            if (this.width != widthPlot1) {\n                this.width = widthPlot1;\n            }\n        },\n        changeIndex2: function (index) {\n            this.index = index;\n            this.updateCurve();\n        },\n        switchSize: function () {\n            if (this.globalWidth > 0) {\n                this.width = this.globalWidth + 100;\n            }\n            this.changeSize();\n        },\n        changeSize: function () {\n            d3.select(\".plot1svg\").attr(\n                \"width\",\n                this.width + this.margin.left + this.margin.right\n            );\n        },\n        prepareData2: function () {\n            if (!this.data.allMessages.length) return;\n            this.plotData = [];\n            // eslint-disable-next-line\n            const defaultPaerseTime = d3.timeParse(\"%H\");\n\n            if (this.index == 2) {\n                this.parseTime = d3.timeParse(\"%M\");\n            } else if (this.index == 1) {\n                this.parseTime = d3.timeParse(\"%M\");\n            } else if (this.index == 3) {\n                this.parseTime = d3.timeParse(\"%M\");\n            } else if (this.index == 5) {\n                this.parseTime = d3.timeParse(\"%H\");\n            } else if (this.index == 6) {\n                this.parseTime = d3.timeParse(\"%H%M\");\n            } else if (this.index == 7) {\n                this.parseTime = d3.timeParse(\"%b %d\"); // Need to be changed\n            }\n\n            for (let i = 0; i < this.data.names.length; i++) {\n                this.plotData.push([[], [], [], [], [], [], [], []]);\n            }\n\n            // 0 unconverted?\n            // 1 hour\n            // Format: [ \"2017-06-22\", 7 ]\n\n            this.plotData.push([[], [], [], [], [], [], [], []]);\n\n            for (let i = 0; i < this.data.allMessages.length; i++) {\n                const name = this.data.allMessages[i].name;\n                const nameIndex = this.data.names.indexOf(name);\n\n                this.plotData[nameIndex][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n                this.plotData[this.data.names.length][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n            }\n\n            for (let i = 0; i < this.plotData.length; i++) {\n                for (let j = 0; j < this.plotData[i][3].length; j++) {\n                    this.plotData[i][4].push([\n                        this.plotData[i][3][j][0],\n                        this.plotData[i][3][j][1] *\n                            (Math.random() * (3 - 0.5) + 0.5),\n                    ]);\n                }\n            }\n\n            for (let i = 0; i < this.plotData.length; i++) {\n                for (let j = 0; j < 24; j++) {\n                    let hourString = j.toString();\n                    hourString =\n                        hourString.length == 2 ? hourString : \"0\" + hourString;\n                    this.plotData[i][5].push([hourString, 0]);\n                }\n            }\n\n            for (let i = 0; i < this.plotData.length; i++) {\n                for (let j = 0; j < 24; j++) {\n                    for (let k = 0; k < 60; k++) {\n                        let hourString = j.toString();\n                        hourString =\n                            hourString.length == 2\n                                ? hourString\n                                : \"0\" + hourString;\n\n                        let minuteString = k.toString();\n                        minuteString =\n                            minuteString.length == 2\n                                ? minuteString\n                                : \"0\" + minuteString;\n\n                        this.plotData[i][6].push([\n                            hourString + minuteString,\n                            0,\n                        ]);\n                    }\n                }\n            }\n\n            for (let i = 0; i < this.data.allMessages.length; i++) {\n                const name = this.data.allMessages[i].name;\n                // eslint-disable-next-line\n                const nameIndex = this.data.names.indexOf(name);\n                // eslint-disable-next-line\n                const hour = this.data.allMessages[i].time.slice(0, 2);\n                const minute = this.data.allMessages[i].time.slice(3, 5);\n                const index = +hour * 60 + +minute;\n\n                this.plotData[nameIndex][5][+hour][1]++;\n                this.plotData[nameIndex][6][index][1]++;\n            }\n\n            for (let i = 0; i < this.plotData.length; i++) {\n                let sum = 0;\n                for (let j = 0; j < this.plotData[i][5].length; j++) {\n                    sum = sum + this.plotData[i][5][j][1];\n                }\n                if (sum != 0) {\n                    for (let j = 0; j < this.plotData[i][5].length; j++) {\n                        this.plotData[i][5][j][1] =\n                            (this.plotData[i][5][j][1] / sum) * 100;\n                    }\n                }\n            }\n\n            for (let i = 0; i < this.plotData.length; i++) {\n                for (let j = 0; j < 7; j++) {\n                    this.plotData[i][7].push([j, 0]);\n                }\n            }\n\n            for (let i = 0; i < this.data.allMessages.length; i++) {\n                const name = this.data.allMessages[i].name;\n                const nameIndex = this.data.names.indexOf(name);\n                const weekday = this.data.allMessages[i].weekday;\n                this.plotData[nameIndex][7][weekday][1]++;\n            }\n\n            for (let i = 0; i < this.data.names.length; i++) {\n                for (let j = 0; j < 7; j++) {\n                    this.plotData[i][7][j][1] =\n                        \"2022-08-0\" + this.plotData[i][7][j][1];\n                }\n            }\n\n            this.createPlot();\n        },\n        createPlot: function () {\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            } else if (this.index == 5) {\n                this.starteDate = this.plotData[2][5][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][5][\n                    this.plotData[2][5].length - 1\n                ][0].substring(0, 4);\n            }\n\n            /*\n            this.width =\n                parseInt(d3.select(\"#my_dataviz2\").style(\"width\")) -\n                this.margin.left -\n                this.margin.right;\n            this.height =\n                parseInt(d3.select(\"#my_dataviz2\").style(\"height\")) -\n                this.margin.top -\n                this.margin.bottom;\n                */\n\n            // svg\n            d3.select(\"#\" + this.classID + \"-svg\").remove();\n\n            const svg = d3\n                .select(\"#\" + this.classID)\n                .append(\"svg\")\n                //.attr(\"class\", this.classID + \"-svg\")\n                .attr(\"id\", this.classID + \"-svg\")\n                .attr(\n                    \"width\",\n                    this.width + this.margin.left + this.margin.right\n                )\n                .attr(\n                    \"height\",\n                    this.height + this.margin.top + this.margin.bottom\n                )\n                .append(\"g\")\n                .attr(\n                    \"transform\",\n                    `translate(${this.margin.left},${this.margin.top})`\n                );\n\n            const x = d3.scaleTime().range([0, this.width]).nice();\n            const xAxis = d3\n                .axisBottom()\n                .scale(x)\n                //.tickFormat(d3.timeFormat(\"%H:%M\"));\n                .tickFormat(d3.timeFormat(\"%a\"));\n\n            // myXaxis -> plot-1-x-axis\n            svg.append(\"g\")\n                .attr(\"transform\", `translate(0, ${this.height})`)\n                .attr(\"id\", this.classID + \"-x-axis\");\n\n            const y = d3.scaleLinear().range([this.height, 0]);\n            const yAxis = d3.axisLeft().scale(y);\n            svg.append(\"g\")\n                //.attr(\"class\", \"myYaxis\")\n                .attr(\"id\", this.classID + \"-y-axis\");\n\n            svg.append(\"text\")\n                .attr(\"id\", this.classID + \"-y-label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"y\", \"-35px\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            // TOOLTIP\n            // eslint-disable-next-line\n            var rectOverlay = svg\n                .append(\"rect\")\n                //.attr(\"cursor\", \"move\")\n                .attr(\"fill\", \"none\")\n                .attr(\"pointer-events\", \"all\")\n                .attr(\"class\", \"zoom\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height)\n                .on(\"mouseover\", this.focusMouseOver())\n                .on(\"mousemove\", this.focusMouseMove())\n                .on(\"mouseout\", this.focusMouseOut());\n            /*.attr(\n                    \"transform\",\n                    \"translate(\" +\n                        this.margin.left +\n                        \",\" +\n                        this.margin.top +\n                        \")\"\n                );\n            //.call(zoom)\n            //.on(\"mousemove\", focusMouseMove)\n            .on(\"mouseover\", focusMouseOver)\n            /*.on(\"mouseout\", focusMouseOut);*/\n\n            this.x = x;\n            this.y = y;\n            this.xAxis = xAxis;\n            this.yAxis = yAxis;\n            this.svg = svg;\n            this.focus = focus;\n\n            this.setInitalLine();\n            //this.updateCurve();\n        },\n        setInitalLine() {\n            let maxY = this.calculateMaxY(this.plotData[0][this.index]);\n            for (let i = 0; i < this.data.names.length; i++) {\n                maxY =\n                    this.calculateMaxY(this.plotData[i][this.index]) > maxY\n                        ? this.calculateMaxY(this.plotData[i][this.index])\n                        : maxY;\n            }\n\n            let parseTime = this.parseTime;\n            if (this.index == 2) {\n                parseTime = d3.timeParse(\"%H\");\n            } else if (this.index == 1) {\n                parseTime = d3.timeParse(\"%H\");\n            } else if (this.index == 3) {\n                parseTime = d3.timeParse(\"%H\");\n            } else if (this.index == 5) {\n                parseTime = d3.timeParse(\"%H\");\n            } else if (this.index == 6) {\n                parseTime = d3.timeParse(\"%H%M\");\n            } else if (this.index == 7) {\n                this.parseTime = d3.timeParse(\"%Y-%m-%d\"); // Need to be changed\n            }\n\n            const timeShift = 0;\n\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            } else if (this.index == 5) {\n                this.starteDate = (0 + timeShift).toString();\n                this.endDate = (23 + timeShift).toString();\n                this.starteDate = \"00\";\n                this.endDate = \"24\";\n            } else if (this.index == 6) {\n                this.starteDate = \"0000\";\n                this.endDate = \"2359\";\n            } else if (this.index == 7) {\n                this.starteDate = \"2022-08-01\";\n                this.endDate = \"2022-08-07\";\n            }\n\n            this.x.domain([\n                parseTime(this.starteDate),\n                parseTime(this.endDate),\n            ]);\n            this.svg.selectAll(\"#\" + this.classID + \"-x-axis\").call(this.xAxis);\n\n            /*\n            this.svg\n                .append(\"text\")\n                .attr(\"class\", \"x label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\", this.width)\n                .attr(\"y\", this.height - 6)\n                .text(\"x-Achse\");\n            */\n\n            // create the Y axis\n            this.y.domain([0, maxY]).nice();\n            this.svg.select(\"#\" + this.classID + \"-y-axis\").call(this.yAxis);\n\n            this.svg\n                .select(\"#\" + this.classID + \"-y-label\")\n                .text(\"Average Messages Per \" + this.indexName[this.index - 1]);\n\n            // this.indexName[this.index - 1].charAt(0).toUpperCase() + this.indexName[this.index - 1].slice(1)\n            //.text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            //this.svg.select(\"title\").text(\"NEUN\");\n\n            const x = this.x;\n            // eslint-disable-next-line\n            const y = this.y;\n            const height = this.height;\n\n            const line = d3\n                .line()\n                .curve(d3.curveBumpX)\n                .x(function (d) {\n                    return x(parseTime(d[0]));\n                })\n                // eslint-disable-next-line\n                .y(function (d) {\n                    return height;\n                });\n\n            this.lineObjects = [];\n\n            for (let i = 0; i < this.classNames.length; i++) {\n                this.lineObjects.push(\n                    this.svg\n                        .selectAll(\".\" + this.classNames[i])\n                        .data([this.plotData[i][this.index]], function (d) {\n                            return parseTime(d[0]);\n                        })\n                );\n            }\n\n            //const classNames = this.classNames;\n\n            for (let i = 0; i < this.lineObjects.length; i++) {\n                this.lineObjects[i]\n                    .join(\"path\")\n                    .attr(\"class\", this.classNames[i])\n                    .merge(this.lineObjects[i])\n                    .attr(\"d\", function (d) {\n                        return line(d);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", this.colors[i])\n                    .style(\"stroke-width\", \"2\");\n            }\n            this.updateCurve();\n        },\n        updateCurve() {\n            let maxY = this.calculateMaxY(this.plotData[0][this.index]);\n            for (let i = 0; i < this.data.names.length; i++) {\n                maxY =\n                    this.calculateMaxY(this.plotData[i][this.index]) > maxY\n                        ? this.calculateMaxY(this.plotData[i][this.index])\n                        : maxY;\n            }\n\n            console.log(this.plotData);\n            console.log(this.index);\n\n            let parseTime = this.parseTime;\n            if (this.index == 2) {\n                parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                parseTime = d3.timeParse(\"%Y\");\n            } else if (this.index == 5) {\n                parseTime = d3.timeParse(\"%H\");\n            } else if (this.index == 6) {\n                parseTime = d3.timeParse(\"%H\");\n            } else if (this.index == 7) {\n                parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 8) {\n                parseTime = d3.timeParse(\"%H\");\n            }\n\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            } else if (this.index == 7) {\n                // Weekday\n                this.starteDate = \"2022-08-01\";\n                this.endDate = \"2022-08-07\";\n            } else {\n                this.starteDate = 0;\n                this.endDate = 23;\n            }\n\n            this.x.domain([\n                parseTime(this.starteDate),\n                parseTime(this.endDate),\n            ]);\n            this.svg\n                .selectAll(\"#\" + this.classID + \"-x-axis\")\n                .transition()\n                .duration(1000)\n                .call(this.xAxis);\n\n            /*\n            this.svg\n                .append(\"text\")\n                .attr(\"class\", \"x label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\", this.width)\n                .attr(\"y\", this.height - 6)\n                .text(\"x-Achse\");\n            */\n\n            // create the Y axis\n            this.y.domain([0, maxY]).nice();\n            this.svg\n                .select(\"#\" + this.classID + \"-y-axis\")\n                .transition()\n                .duration(1000)\n                .call(this.yAxis);\n\n            this.svg\n                .select(\"#\" + this.classID + \"-y-label\")\n                .transition()\n                .duration(1000)\n                //.text(\"Average Messages Per \" + this.indexName[this.index - 1]);\n                .text(\"Average Messages Per Day\");\n\n            // this.indexName[this.index - 1].charAt(0).toUpperCase() + this.indexName[this.index - 1].slice(1)\n            //.text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            //this.svg.select(\"title\").text(\"NEUN\");\n\n            const x = this.x;\n            const y = this.y;\n\n            const line = d3\n                .line()\n                .curve(d3.curveBumpX)\n                .x(function (d) {\n                    return x(parseTime(d[0]));\n                })\n                .y(function (d) {\n                    return y(d[1]);\n                });\n\n            this.lineObjects = [];\n\n            if (this.index == 7) {\n                for (let i = 0; i < this.classNames.length; i++) {\n                    this.lineObjects.push(\n                        this.svg\n                            .selectAll(\".\" + this.classNames[i])\n                            .data([this.plotData[i][this.index]], function (d) {\n                                return parseTime(\"2022-08-0\" + d[0] + 1);\n                            })\n                    );\n                }\n            } else {\n                for (let i = 0; i < this.classNames.length; i++) {\n                    this.lineObjects.push(\n                        this.svg\n                            .selectAll(\".\" + this.classNames[i])\n                            .data([this.plotData[i][this.index]], function (d) {\n                                return parseTime(d[0]);\n                            })\n                    );\n                }\n            }\n\n            const classNames = this.classNames;\n            //const classID = this.classID;\n\n            for (let i = 0; i < this.lineObjects.length; i++) {\n                this.lineObjects[i]\n                    .join(\"path\")\n                    .attr(\"class\", this.classNames[i])\n                    .merge(this.lineObjects[i])\n                    .transition()\n                    .duration(1000)\n                    .attrTween(\"d\", function (d) {\n                        var previous = d3.select(\".\" + classNames[i]).attr(\"d\");\n\n                        //previous.attr(\"d\");\n                        var current = line(d);\n                        return interpolatePath(previous, current);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", this.colors[i])\n                    .style(\"stroke-width\", \"2\");\n            }\n        },\n        calculateMaxY: function (array) {\n            let max = 0;\n            for (let i = 0; i < array.length; i++) {\n                if (array[i][1] > max) {\n                    max = array[i][1];\n                }\n            }\n            if (max < 10) {\n                max = 10;\n            } else if (max < 100) {\n                let modulo = max % 10;\n                max = max - modulo + 10;\n            } else if (max < 500) {\n                let modulo = max % 100;\n                max = max - modulo + 100;\n            } else if (max < 1000) {\n                let modulo = max % 200;\n                max = max - modulo + 200;\n            } else if (max < 10000) {\n                let modulo = max % 500;\n                max = max - modulo + 500;\n            }\n            return max;\n        },\n        focusMouseOver: function () {\n            //console.log(\"DRIN\");\n        },\n        focusMouseMove: function () {\n            //console.log(\"BEWEGUNG!\");\n        },\n        focusMouseOut: function () {\n            //console.log(\"DRAUSSEN\");\n        },\n        /*\n        mousemove: function () {\n            var x0 = x.invert(d3.mouse(this)[0]),\n                i = bisectDate(data, x0, 1),\n                d0 = data[i - 1],\n                d1 = data[i],\n                d = x0 - d0.date > d1.date - x0 ? d1 : d0;\n            this.focus.attr(\n                \"transform\",\n                \"translate(\" + x(d.date) + \",\" + y(d.likes) + \")\"\n            );\n            this.focus.select(\".tooltip-date\").text(dateFormatter(d.date));\n            this.focus.select(\".tooltip-likes\").text(formatValue(d.likes));\n        },\n        */\n    },\n};\n</script>\n<!-- css loaderhttps://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles -->\n<style>\n/* AXES */\n/* ticks */\n\n/* STYLE BUTTONS */\n\n/* title */\n.title {\n    font-size: 100px;\n    text-anchor: middle;\n}\n\n.myXaxis,\n.myYaxis,\n#plot-1-x-axis,\n#plot-1-y-axis,\n#plot-2-x-axis,\n#plot-2-y-axis {\n    color: #000;\n}\n\n#plot-1-y-label,\n#plot-2-y-label {\n    font-size: 1rem;\n}\n\n.single-button {\n    font-size: 1.5rem;\n    color: #000;\n    float: left;\n    margin-right: 15px;\n}\n\n.single-button:last-child {\n    margin-right: 0px;\n}\n\n.buttons {\n    height: 40px;\n    width: max-content;\n    margin: auto;\n}\n\n/*\n#my_dataviz2 {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n}\n*/\n\n.plot1svg {\n    width: 100%;\n    margin: auto;\n}\n\n#plot-1-title,\n#plot-2-title {\n    margin: auto;\n    font-size: 1.5rem;\n    height: 40px;\n    color: #000;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Plot2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Plot2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Plot2.vue?vue&type=template&id=80bd26d8&\"\nimport script from \"./Plot2.vue?vue&type=script&lang=js&\"\nexport * from \"./Plot2.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Plot2.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":_vm.classID + '-container'}},[_c('div',{attrs:{\"id\":_vm.classID + '-title'}},[_vm._v(\" Number Of Messages per \"+_vm._s(this.indexName[this.index - 1])+\" \")]),_c('div',{attrs:{\"id\":_vm.classID}}),_c('div',{staticClass:\"buttons\"},[_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(3)}}},[_vm._v(\"Year\")]),_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(2)}}},[_vm._v(\"Month\")]),_c('div',{staticClass:\"single-button\",on:{\"click\":function($event){return _vm.changeIndex2(1)}}},[_vm._v(\"Days\")]),_c('input',{attrs:{\"type\":\"date\",\"id\":\"start\",\"name\":\"trip-start\",\"min\":_vm.starteDate,\"max\":_vm.endDate},domProps:{\"value\":_vm.starteDate}}),_c('input',{attrs:{\"type\":\"date\",\"id\":\"end\",\"name\":\"trip-end\",\"min\":_vm.starteDate,\"max\":_vm.endDate},domProps:{\"value\":_vm.endDate}}),_c('date-picker',{attrs:{\"default-value\":\"2020-01-01\",\"valueType\":\"format\"},model:{value:(_vm.testdate),callback:function ($$v) {_vm.testdate=$$v},expression:\"testdate\"}}),_c('date-picker',{attrs:{\"type\":\"datetime\"},model:{value:(_vm.testdate),callback:function ($$v) {_vm.testdate=$$v},expression:\"testdate\"}}),_c('date-picker',{attrs:{\"range\":\"\"},model:{value:(_vm.testdate),callback:function ($$v) {_vm.testdate=$$v},expression:\"testdate\"}})],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div :id=\"classID + '-container'\">\n        <div :id=\"classID + '-title'\">\n            Number Of Messages per {{ this.indexName[this.index - 1] }}\n        </div>\n        <div :id=\"classID\"></div>\n        <div class=\"buttons\">\n            <div @click=\"changeIndex2(3)\" class=\"single-button\">Year</div>\n            <div @click=\"changeIndex2(2)\" class=\"single-button\">Month</div>\n            <div @click=\"changeIndex2(1)\" class=\"single-button\">Days</div>\n            <input\n                type=\"date\"\n                id=\"start\"\n                name=\"trip-start\"\n                :value=\"starteDate\"\n                :min=\"starteDate\"\n                :max=\"endDate\"\n            />\n            <input\n                type=\"date\"\n                id=\"end\"\n                name=\"trip-end\"\n                :value=\"endDate\"\n                :min=\"starteDate\"\n                :max=\"endDate\"\n            />\n            <date-picker\n                v-model=\"testdate\"\n                default-value=\"2020-01-01\"\n                valueType=\"format\"\n            ></date-picker>\n            <date-picker v-model=\"testdate\" type=\"datetime\"></date-picker>\n            <date-picker v-model=\"testdate\" range></date-picker>\n        </div>\n    </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport * as d3 from \"d3\";\nimport { interpolatePath } from \"d3-interpolate-path\";\nimport DatePicker from \"vue2-datepicker\";\nimport \"vue2-datepicker/index.css\";\n\nexport default {\n    name: \"Plot-6\",\n    components: { DatePicker },\n    props: {\n        data: Object,\n        globalWidth: Number,\n        classIDProp: String,\n    },\n    data() {\n        return {\n            plotData: [], // erster Index ist Lisa, Friedrich, Gesamt // Zweiter Index ist unvonverted, perDay, perMonth, perYear\n            starteDate: \"\",\n            endDate: \"\",\n            testdate: new Date(2019, 11, 8),\n            index: 3,\n            parseTime: d3.timeParse(\"%Y-%m-%d\"),\n            allCurveObjects: [],\n            curve: {},\n            svg: {},\n            xScale: {},\n            yScale: {},\n            x: {},\n            y: {},\n            xAxis: {},\n            yAxis: {},\n            focus: {},\n            margin: { top: 20, right: 30, bottom: 30, left: 50 },\n            width: 876 - 100,\n            //width: 576 - 100,\n            height: 350,\n            indexName: [\"Minute\", \"Hour\", \"Year\", \"Day\", \"Month\"],\n            classNames: [],\n            classNamesDot: [],\n            lineObjects: [],\n            colors: [\n                \"red\",\n                \"green\",\n                \"blue\",\n                \"black\",\n                \"brown\",\n                \"coral\",\n                \"darkblue\",\n                \"orange\",\n                \"darkorange\",\n                \"darkviolet\",\n                \"indigo\",\n                \"lightsalmon\",\n                \"midnightblue\",\n                \"red\",\n                \"green\",\n                \"blue\",\n                \"black\",\n                \"brown\",\n                \"coral\",\n                \"darkblue\",\n                \"orange\",\n                \"darkorange\",\n                \"darkviolet\",\n                \"indigo\",\n                \"lightsalmon\",\n                \"midnightblue\",\n                \"red\",\n                \"green\",\n                \"blue\",\n                \"black\",\n                \"brown\",\n                \"coral\",\n                \"darkblue\",\n                \"orange\",\n                \"darkorange\",\n                \"darkviolet\",\n                \"indigo\",\n                \"lightsalmon\",\n                \"midnightblue\",\n            ],\n            size: true,\n            classID: \"plot-6\",\n        };\n    },\n    mounted() {\n        this.classNames = this.classNames.map(\n            (el) => this.classIDProp + \"-\" + el\n        );\n        this.classID = this.classIDProp;\n        window.addEventListener(\"resize\", this.myEventHandler);\n        this.getStartWidth();\n        this.createClassArrays();\n        this.prepareData2();\n    },\n    watch: {\n        data() {\n            this.createClassArrays();\n            this.prepareData2();\n        },\n        globalWidth: function () {\n            this.switchSize();\n        },\n    },\n    methods: {\n        // Wofür wird das benötigt?\n        createClassArrays: function () {\n            this.classNames = [];\n            this.classNamesDot = [];\n            for (let i = 0; i <= this.data.names.length; i++) {\n                const index = (i + 1).toString();\n                this.classNames.push(\"line-\" + index);\n                this.classNamesDot.push(\".line\" + index);\n            }\n        },\n        getStartWidth: async function () {\n            this.width =\n                document.querySelector(\"#grid-\" + this.classID).clientWidth -\n                (this.margin.left + this.margin.right);\n        },\n        myEventHandler: function () {\n            // eslint-disable-next-line\n            const widthPlot1 =\n                document.querySelector(\"#grid-\" + this.classID).clientWidth -\n                (this.margin.left + this.margin.right);\n            if (this.width != widthPlot1) {\n                this.width = widthPlot1;\n            }\n        },\n        changeIndex2: function (index) {\n            this.index = index;\n            this.updateCurve();\n        },\n        switchSize: function () {\n            if (this.globalWidth > 0) {\n                this.width = this.globalWidth + 100;\n            }\n            this.changeSize();\n        },\n        changeSize: function () {\n            d3.select(\".plot1svg\").attr(\n                \"width\",\n                this.width + this.margin.left + this.margin.right\n            );\n        },\n        prepareData2: function () {\n            if (!this.data.allMessages.length) return;\n            this.plotData = [];\n\n            console.log(this.data.allMessages);\n\n            const defaultPaerseTime = d3.timeParse(\"%Y-%m-%d\");\n\n            if (this.index == 2) {\n                this.parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                this.parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            } else if (this.index == 3) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            } else if (this.index == 4) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            } else if (this.index == 5) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            } else if (this.index == 6) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            } else if (this.index == 7) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            } else if (this.index == 8) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            }\n\n            for (let i = 0; i < this.data.names.length; i++) {\n                this.plotData.push([[], [], [], [], []]);\n            }\n\n            this.plotData.push([[], [], [], [], []]);\n\n            for (let i = 0; i < this.data.allMessages.length; i++) {\n                const name = this.data.allMessages[i].name;\n                const nameIndex = this.data.names.indexOf(name);\n\n                this.plotData[nameIndex][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n                this.plotData[this.data.names.length][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n            }\n\n            // Count Unvonverted, still stored as unconverted\n            for (let i = 0; i < this.plotData.length; i++) {\n                let updatedUnconverted = [];\n                let lastDate = \"\";\n                for (let j = 0; j < this.plotData[i][0].length; j++) {\n                    if (this.plotData[i][0][j][0] != lastDate) {\n                        lastDate = this.plotData[i][0][j][0];\n                        updatedUnconverted.push([lastDate, 1]);\n                    } else {\n                        lastDate = this.plotData[i][0][j][0];\n                        const lastvalue =\n                            updatedUnconverted[\n                                updatedUnconverted.length - 1\n                            ][1];\n                        updatedUnconverted[updatedUnconverted.length - 1] = [\n                            lastDate,\n                            lastvalue + 1,\n                        ];\n                    }\n                }\n                this.plotData[i][0] = updatedUnconverted;\n            }\n\n            // per Day\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n\n                const allDates = [];\n                for (let j = 0; j < this.plotData[i][0].length; j++) {\n                    allDates.push(this.plotData[i][0][j][0]);\n                }\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    const date = new Date(j).toISOString().split(\"T\")[0];\n                    if (allDates.includes(date)) {\n                        const dateIndex = allDates.indexOf(date);\n                        this.plotData[i][1].push([\n                            this.plotData[i][0][dateIndex][0],\n                            this.plotData[i][0][dateIndex][1],\n                        ]);\n                    } else {\n                        this.plotData[i][1].push([date, 0]);\n                    }\n                }\n            }\n\n            //for (let i = 0; i < this.plotData.length; i++) {}\n\n            // per month\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n                const allMonth = []; // 2015-06\n                let daysPerMonth = [];\n                let daysPerMonthValue = [];\n\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    // add \"empty\" months\n                    const month = new Date(j).toISOString().substring(0, 7);\n                    if (!allMonth.includes(month)) {\n                        allMonth.push(month);\n                        this.plotData[i][2].push([month, 0]);\n                        daysPerMonth.push(month);\n                        daysPerMonthValue.push(0);\n                    }\n                    const countIndex = daysPerMonth.indexOf(month);\n                    daysPerMonthValue[countIndex]++;\n                }\n                // loop throu all days\n                for (let j = 0; j < this.plotData[i][0].length; j = j + 1) {\n                    const month = this.plotData[i][0][j][0].substring(0, 7);\n                    const value = this.plotData[i][0][j][1];\n                    const monthIndex = allMonth.indexOf(month);\n\n                    this.plotData[i][2][monthIndex][1] =\n                        this.plotData[i][2][monthIndex][1] + value;\n                }\n\n                for (let j = 0; j < this.plotData[i][2].length; j = j + 1) {\n                    const month = this.plotData[i][2][j][0];\n                    const value = this.plotData[i][2][j][1];\n                    const monthIndex = daysPerMonth.indexOf(month);\n                    const days = daysPerMonthValue[monthIndex];\n                    if (value != 0) {\n                        this.plotData[i][2][j][1] = value / days;\n                    }\n                }\n            }\n\n            // per year\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n                const allYears = []; // 2015\n                let daysPerYear = [];\n                let daysPerYearValue = [];\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    const year = new Date(j).toISOString().substring(0, 4);\n                    if (!allYears.includes(year)) {\n                        allYears.push(year);\n                        this.plotData[i][3].push([year, 0]);\n                        daysPerYear.push(year);\n                        daysPerYearValue.push(0);\n                    }\n                    const countIndex = daysPerYear.indexOf(year);\n                    daysPerYearValue[countIndex]++;\n                }\n                for (let j = 0; j < this.plotData[i][0].length; j = j + 1) {\n                    const year = this.plotData[i][0][j][0].substring(0, 4);\n                    const value = this.plotData[i][0][j][1];\n                    const yearIndex = allYears.indexOf(year);\n                    this.plotData[i][3][yearIndex][1] =\n                        this.plotData[i][3][yearIndex][1] + value;\n                }\n                for (let j = 0; j < this.plotData[i][3].length; j = j + 1) {\n                    const year = this.plotData[i][3][j][0];\n                    const value = this.plotData[i][3][j][1];\n                    const yearIndex = daysPerYear.indexOf(year);\n                    const days = daysPerYearValue[yearIndex];\n                    if (value != 0) {\n                        this.plotData[i][3][j][1] = value / days;\n                    }\n                }\n            }\n\n            // Was tut das?\n            for (let i = 0; i < this.plotData.length; i++) {\n                for (let j = 0; j < this.plotData[i][3].length; j++) {\n                    this.plotData[i][4].push([\n                        this.plotData[i][3][j][0],\n                        this.plotData[i][3][j][1] *\n                            (Math.random() * (3 - 0.5) + 0.5),\n                    ]);\n                }\n            }\n\n            console.log(this.plotData);\n\n            this.createPlot();\n        },\n        createPlot: function () {\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            } else if (this.index == 4) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            } else if (this.index == 5) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            } else if (this.index == 6) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            } else if (this.index == 7) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            } else if (this.index == 8) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            // svg\n            d3.select(\"#\" + this.classID + \"-svg\").remove();\n\n            const svg = d3\n                .select(\"#\" + this.classID)\n                .append(\"svg\")\n                //.attr(\"class\", this.classID + \"-svg\")\n                .attr(\"id\", this.classID + \"-svg\")\n                .attr(\n                    \"width\",\n                    this.width + this.margin.left + this.margin.right\n                )\n                .attr(\n                    \"height\",\n                    this.height + this.margin.top + this.margin.bottom\n                )\n                .append(\"g\")\n                .attr(\n                    \"transform\",\n                    `translate(${this.margin.left},${this.margin.top})`\n                );\n\n            const x = d3.scaleTime().range([0, this.width]);\n            const xAxis = d3.axisBottom().scale(x);\n\n            // myXaxis -> plot-1-x-axis\n            svg.append(\"g\")\n                .attr(\"transform\", `translate(0, ${this.height})`)\n                .attr(\"id\", this.classID + \"-x-axis\");\n\n            const y = d3.scaleLinear().range([this.height, 0]);\n            const yAxis = d3.axisLeft().scale(y);\n            svg.append(\"g\")\n                //.attr(\"class\", \"myYaxis\")\n                .attr(\"id\", this.classID + \"-y-axis\");\n\n            svg.append(\"text\")\n                .attr(\"id\", this.classID + \"-y-label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"y\", \"-35px\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            this.x = x;\n            this.y = y;\n            this.xAxis = xAxis;\n            this.yAxis = yAxis;\n            this.svg = svg;\n            this.focus = focus;\n\n            this.setInitalLine();\n        },\n        setInitalLine() {\n            let maxY = 0;\n            for (let i = 0; i <= this.data.names.length; i++) {\n                maxY =\n                    this.calculateMaxY(this.plotData[i][this.index]) > maxY\n                        ? this.calculateMaxY(this.plotData[i][this.index])\n                        : maxY;\n            }\n\n            let parseTime = this.parseTime;\n            if (this.index == 2) {\n                parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                parseTime = d3.timeParse(\"%Y\");\n            }\n\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            this.x.domain([\n                parseTime(this.starteDate),\n                parseTime(this.endDate),\n            ]);\n            this.svg.selectAll(\"#\" + this.classID + \"-x-axis\").call(this.xAxis);\n\n            // create the Y axis\n            this.y.domain([0, maxY]).nice();\n            this.svg.select(\"#\" + this.classID + \"-y-axis\").call(this.yAxis);\n\n            this.svg\n                .select(\"#\" + this.classID + \"-y-label\")\n                .text(\"Average Messages Per \" + this.indexName[this.index - 1]);\n\n            const x = this.x;\n            // eslint-disable-next-line\n            const y = this.y;\n            const height = this.height;\n\n            const line = d3\n                .line()\n                .curve(d3.curveBumpX)\n                .x(function (d) {\n                    return x(parseTime(d[0]));\n                })\n                // eslint-disable-next-line\n                .y(function (d) {\n                    return height;\n                });\n\n            this.lineObjects = [];\n\n            for (let i = 0; i < this.classNames.length; i++) {\n                this.lineObjects.push(\n                    this.svg\n                        .selectAll(\".\" + this.classNames[i])\n                        .data([this.plotData[i][this.index]], function (d) {\n                            return parseTime(d[0]);\n                        })\n                );\n            }\n\n            //const classNames = this.classNames;\n\n            for (let i = 0; i < this.lineObjects.length; i++) {\n                this.lineObjects[i]\n                    .join(\"path\")\n                    .attr(\"class\", this.classNames[i])\n                    .merge(this.lineObjects[i])\n                    .attr(\"d\", function (d) {\n                        return line(d);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", this.colors[i])\n                    .style(\"stroke-width\", \"2\");\n            }\n            this.updateCurve();\n        },\n        updateCurve() {\n            let maxY = 0;\n            for (let i = 0; i <= this.data.names.length; i++) {\n                maxY =\n                    this.calculateMaxY(this.plotData[i][this.index]) > maxY\n                        ? this.calculateMaxY(this.plotData[i][this.index])\n                        : maxY;\n            }\n\n            let parseTime = this.parseTime;\n            if (this.index == 2) {\n                parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                parseTime = d3.timeParse(\"%Y\");\n            }\n\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            this.x.domain([\n                parseTime(this.starteDate),\n                parseTime(this.endDate),\n            ]);\n            this.svg\n                .selectAll(\"#\" + this.classID + \"-x-axis\")\n                .transition()\n                .duration(1000)\n                .call(this.xAxis);\n\n            /*\n            this.svg\n                .append(\"text\")\n                .attr(\"class\", \"x label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\", this.width)\n                .attr(\"y\", this.height - 6)\n                .text(\"x-Achse\");\n            */\n\n            // create the Y axis\n            this.y.domain([0, maxY]).nice();\n            this.svg\n                .select(\"#\" + this.classID + \"-y-axis\")\n                .transition()\n                .duration(1000)\n                .call(this.yAxis);\n\n            this.svg\n                .select(\"#\" + this.classID + \"-y-label\")\n                .transition()\n                .duration(1000)\n                //.text(\"Average Messages Per \" + this.indexName[this.index - 1]);\n                .text(\"Average Messages Per Day\");\n\n            // this.indexName[this.index - 1].charAt(0).toUpperCase() + this.indexName[this.index - 1].slice(1)\n            //.text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            //this.svg.select(\"title\").text(\"NEUN\");\n\n            const x = this.x;\n            const y = this.y;\n\n            const line = d3\n                .line()\n                .curve(d3.curveBumpX)\n                .x(function (d) {\n                    return x(parseTime(d[0]));\n                })\n                .y(function (d) {\n                    return y(d[1]);\n                });\n\n            this.lineObjects = [];\n\n            for (let i = 0; i < this.classNames.length; i++) {\n                this.lineObjects.push(\n                    this.svg\n                        .selectAll(\".\" + this.classNames[i])\n                        .data([this.plotData[i][this.index]], function (d) {\n                            return parseTime(d[0]);\n                        })\n                );\n            }\n\n            const classNames = this.classNames;\n            //const classID = this.classID;\n\n            for (let i = 0; i < this.lineObjects.length; i++) {\n                this.lineObjects[i]\n                    .join(\"path\")\n                    .attr(\"class\", this.classNames[i])\n                    .merge(this.lineObjects[i])\n                    .transition()\n                    .duration(1000)\n                    .attrTween(\"d\", function (d) {\n                        var previous = d3.select(\".\" + classNames[i]).attr(\"d\");\n                        //previous.attr(\"d\");\n                        var current = line(d);\n                        return interpolatePath(previous, current);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", this.colors[i])\n                    .style(\"stroke-width\", \"2\");\n            }\n        },\n        calculateMaxY: function (array) {\n            let max = 0;\n            for (let i = 0; i < array.length; i++) {\n                if (array[i][1] > max) {\n                    max = array[i][1];\n                }\n            }\n            if (max < 3) {\n                max = 3;\n            } else if (max < 5) {\n                max = 5;\n            } else if (max < 10) {\n                max = 10;\n            } else if (max < 100) {\n                let modulo = max % 10;\n                max = max - modulo + 10;\n            } else if (max < 500) {\n                let modulo = max % 100;\n                max = max - modulo + 100;\n            } else if (max < 1000) {\n                let modulo = max % 200;\n                max = max - modulo + 200;\n            } else if (max < 10000) {\n                let modulo = max % 500;\n                max = max - modulo + 500;\n            }\n            return max;\n        },\n        focusMouseOver: function () {\n            //console.log(\"DRIN\");\n        },\n        focusMouseMove: function () {\n            //console.log(\"BEWEGUNG!\");\n        },\n        focusMouseOut: function () {\n            //console.log(\"DRAUSSEN\");\n        },\n        /*\n        mousemove: function () {\n            var x0 = x.invert(d3.mouse(this)[0]),\n                i = bisectDate(data, x0, 1),\n                d0 = data[i - 1],\n                d1 = data[i],\n                d = x0 - d0.date > d1.date - x0 ? d1 : d0;\n            this.focus.attr(\n                \"transform\",\n                \"translate(\" + x(d.date) + \",\" + y(d.likes) + \")\"\n            );\n            this.focus.select(\".tooltip-date\").text(dateFormatter(d.date));\n            this.focus.select(\".tooltip-likes\").text(formatValue(d.likes));\n        },\n        */\n    },\n};\n</script>\n<!-- css loaderhttps://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles -->\n<style>\n/* AXES */\n/* ticks */\n\n/* STYLE BUTTONS */\n\n/* title */\n.title {\n    font-size: 100px;\n    text-anchor: middle;\n}\n\n.myXaxis,\n.myYaxis,\n#plot-1-x-axis,\n#plot-1-y-axis,\n#plot-2-x-axis,\n#plot-2-y-axis {\n    color: #000;\n}\n\n#plot-1-y-label,\n#plot-2-y-label {\n    font-size: 1rem;\n}\n\n.single-button {\n    font-size: 1.5rem;\n    color: #000;\n    float: left;\n    margin-right: 15px;\n}\n\n.single-button:last-child {\n    margin-right: 0px;\n}\n\n.buttons {\n    height: 40px;\n    width: max-content;\n    margin: auto;\n}\n\n/*\n#my_dataviz2 {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n}\n*/\n\n.plot1svg {\n    width: 100%;\n    margin: auto;\n}\n\n#plot-1-title,\n#plot-2-title {\n    margin: auto;\n    font-size: 1.5rem;\n    height: 40px;\n    color: #000;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Plot6.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Plot6.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Plot6.vue?vue&type=template&id=056bf5cc&\"\nimport script from \"./Plot6.vue?vue&type=script&lang=js&\"\nexport * from \"./Plot6.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Plot6.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"plot-outside\"}},[_c('div',{attrs:{\"id\":\"plot-inside\"}})])}]\n\nexport { render, staticRenderFns }","<template>\n    <div id=\"plot-outside\">\n        <div id=\"plot-inside\"></div>\n    </div>\n</template>\n\n<script>\n// eslint-disable-next-line\nimport * as d3 from \"d3\";\n// eslint-disable-next-line\nimport { interpolatePath } from \"d3-interpolate-path\";\n\nexport default {\n    name: \"Plot-1\",\n    components: {},\n    props: {\n        data: Object,\n    },\n    data() {\n        return {\n            plotData: [\n                [\n                    [1, 1],\n                    [2, 2],\n                    [3, 3],\n                    [4, 4],\n                    [5, 5],\n                    [6, 6],\n                ],\n                [\n                    [1, 6],\n                    [2, 5],\n                    [3, 4],\n                    [4, 3],\n                    [5, 2],\n                    [6, 1],\n                ],\n            ],\n            margin: { top: 20, right: 30, bottom: 30, left: 50 },\n            width: 876 - 100,\n            //width: 576 - 100,\n            height: 350,\n            x: {},\n            y: {},\n            xAxis: {},\n            yAxis: {},\n            focus: {},\n            svg: {},\n        };\n    },\n    mounted() {\n        this.createPlot();\n    },\n    watch: {\n        data() {},\n        globalWidth() {},\n    },\n    methods: {\n        createPlot: function () {\n            // svg\n            d3.select(\"#\" + \"plot-inside\" + \"-svg\").remove();\n\n            const svg = d3\n                .select(\"#\" + \"plot-inside\")\n                .append(\"svg\")\n                .attr(\"id\", \"plot-inside\" + \"-svg\")\n                .attr(\n                    \"width\",\n                    this.width + this.margin.left + this.margin.right\n                )\n                .attr(\n                    \"height\",\n                    this.height + this.margin.top + this.margin.bottom\n                )\n                .append(\"g\")\n                .attr(\n                    \"transform\",\n                    `translate(${this.margin.left},${this.margin.top})`\n                );\n\n            const x = d3.scaleTime().range([0, this.width]);\n            const xAxis = d3.axisBottom().scale(x);\n\n            // myXaxis -> plot-1-x-axis\n            svg.append(\"g\")\n                .attr(\"transform\", `translate(0, ${this.height})`)\n                .attr(\"id\", \"plot-inside\" + \"-x-axis\");\n\n            const y = d3.scaleLinear().range([this.height, 0]);\n            const yAxis = d3.axisLeft().scale(y);\n            svg.append(\"g\")\n                //.attr(\"class\", \"myYaxis\")\n                .attr(\"id\", \"plot-inside\" + \"-y-axis\");\n\n            svg.append(\"text\")\n                .attr(\"id\", \"plot-inside\" + \"-y-label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"y\", \"-35px\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(\"average messages per \" + \"TEST1\");\n\n            this.x = x;\n            this.y = y;\n            this.xAxis = xAxis;\n            this.yAxis = yAxis;\n            this.svg = svg;\n            this.focus = focus;\n        },\n        createClassArrays: function () {\n            this.classNames = [];\n            this.classNamesDot = [];\n            for (let i = 0; i <= this.data.names.length; i++) {\n                const index = (i + 1).toString();\n                this.classNames.push(\"line-\" + index);\n                this.classNamesDot.push(\".line\" + index);\n            }\n        },\n    },\n};\n</script>\n\n<style>\n#plot-outside {\n    background-color: antiquewhite;\n    width: 900px;\n    height: 400px;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TestPlot.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TestPlot.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TestPlot.vue?vue&type=template&id=8bf8e6e6&\"\nimport script from \"./TestPlot.vue?vue&type=script&lang=js&\"\nexport * from \"./TestPlot.vue?vue&type=script&lang=js&\"\nimport style0 from \"./TestPlot.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"test-plot\"},[_c('div',{attrs:{\"id\":\"my_dataviz\"}})])}]\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"test-plot\"><div id=\"my_dataviz\"></div></div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport VuePapaParse from \"vue-papa-parse\";\nimport * as d3 from \"d3\";\nVue.use(VuePapaParse);\n\nexport default {\n    components: {},\n    name: \"D3BarPlot\",\n    props: {},\n    data() {\n        return {\n            dataObj: [\n                {\n                    Country: \"United States\",\n                    Value: \"12394\",\n                },\n                {\n                    Country: \"Germany\",\n                    Value: \"6452\",\n                },\n                {\n                    Country: \"Poland\",\n                    Value: \"6468\",\n                },\n            ],\n        };\n    },\n    mounted() {\n        this.init();\n    },\n    watch: {},\n    methods: {\n        init: function () {\n            // set the dimensions and margins of the graph\n            const margin = { top: 50, right: 50, bottom: 90, left: 50 },\n                width = 460 - margin.left - margin.right,\n                height = 450 - margin.top - margin.bottom;\n\n            // append the svg object to the body of the page\n            const svg = d3\n                .select(\"#my_dataviz\")\n                .append(\"svg\")\n                .attr(\"width\", width + margin.left + margin.right)\n                .attr(\"height\", height + margin.top + margin.bottom)\n                .append(\"g\")\n                .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n            // Parse the Data\n\n            //data = this.dataObj;\n            //console.log(data);\n            // X axis\n            const x = d3\n                .scaleBand()\n                .range([0, width])\n                .domain(this.dataObj.map((d) => d.Country))\n                .padding(0.2);\n            svg.append(\"g\")\n                .attr(\"transform\", `translate(0,${height})`)\n                .call(d3.axisBottom(x))\n                .selectAll(\"text\")\n                .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n                .style(\"text-anchor\", \"end\")\n                .style(\"color\", \"black\");\n\n            // Add Y axis\n            const y = d3.scaleLinear().domain([0, 14000]).range([height, 0]);\n\n            const yAxis = d3.axisLeft().scale(y).ticks(7, \",.0f\");\n            svg.append(\"g\")\n                .call(yAxis)\n                .selectAll(\"text\")\n                .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n                .style(\"text-anchor\", \"end\")\n                .style(\"color\", \"black\")\n                .style(\"font-size\", \"10px\");\n\n            // Bars\n            svg.selectAll(\"mybar\")\n                .data(this.dataObj)\n                .join(\"rect\")\n                .attr(\"x\", (d) => x(d.Country))\n                .attr(\"width\", x.bandwidth())\n                .attr(\"fill\", \"black\")\n                // no bar at the beginning thus:\n                // eslint-disable-next-line\n                .attr(\"height\", (d) => height - y(0)) // always equal to 0\n                // eslint-disable-next-line\n                .attr(\"y\", (d) => y(0));\n\n            // Animation\n            svg.selectAll(\"rect\")\n                .transition()\n                .duration(800)\n                .attr(\"y\", (d) => y(d.Value))\n                .attr(\"height\", (d) => height - y(d.Value))\n                .delay((d, i) => {\n                    console.log(i);\n                    return i * 100;\n                });\n        },\n    },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped></style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./D3BarPlot.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./D3BarPlot.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./D3BarPlot.vue?vue&type=template&id=fea20d6a&scoped=true&\"\nimport script from \"./D3BarPlot.vue?vue&type=script&lang=js&\"\nexport * from \"./D3BarPlot.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"fea20d6a\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"title\"},[_vm._v(\" Number Of Messages er \"+_vm._s(this.indexName[this.index - 1])+\" \")]),_c('div',{staticClass:\"svg-container\",attrs:{\"id\":\"container\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div>\n        <div class=\"title\">\n            Number Of Messages er {{ this.indexName[this.index - 1] }}\n        </div>\n        <div id=\"container\" class=\"svg-container\"></div>\n        <!--  <div class=\"button-box\" style=\"height: 50px\">\n            <button\n                class=\"button\"\n                :class=\"{ active: index == 3 }\"\n                type=\"button\"\n                @click=\"changeIndex2(3)\"\n            >\n                Year\n            </button>\n            <button\n                class=\"button\"\n                :class=\"{ active: index == 2 }\"\n                type=\"button\"\n                @click=\"changeIndex2(2)\"\n            >\n                Month\n            </button>\n            <button\n                class=\"button\"\n                :class=\"{ active: index == 1 }\"\n                type=\"button\"\n                @click=\"changeIndex2(1)\"\n            >\n                Day\n            </button>\n        </div> -->\n    </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport { interpolatePath } from \"d3-interpolate-path\";\n\nexport default {\n    name: \"D3LineChartv3Resize\",\n    components: {},\n    props: {\n        data: Object,\n    },\n    data() {\n        return {\n            plotData: [], // erster Index ist Lisa, Friedrich, Gesamt // Zweiter Index ist unvonverted, perDay, perMonth, perYear\n            starteDate: \"\",\n            endDate: \"\",\n            index: 3,\n            parseTime: d3.timeParse(\"%Y-%m-%d\"),\n            allCurveObjects: [],\n            curve: {},\n            svg: {},\n            xScale: {},\n            yScale: {},\n            x: {},\n            y: {},\n            xAxis: {},\n            yAxis: {},\n            focus: {},\n            margin: { top: 50, right: 50, bottom: 50, left: 50 },\n            width: 1060 - 100,\n            height: 370 - 100,\n            indexName: [\"Day\", \"Month\", \"Year\"],\n            classNames: [\"line1\", \"line2\", \"line3\"],\n            classNamesDot: [\".line1\", \".line2\", \".line3\"],\n            lineObjects: [],\n            colors: [\"red\", \"green\", \"blue\"],\n        };\n    },\n    mounted() {\n        this.prepareData2();\n    },\n    watch: {\n        data() {\n            this.prepareData2();\n        },\n    },\n    methods: {\n        changeIndex2: function (index) {\n            this.index = index;\n            this.updateCurve();\n        },\n        prepareData2: function () {\n            if (!this.data.allMessages.length) return;\n            this.plotData = [];\n            const defaultPaerseTime = d3.timeParse(\"%Y-%m-%d\");\n\n            if (this.index == 2) {\n                this.parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                this.parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                this.parseTime = d3.timeParse(\"%Y\");\n            }\n\n            for (let i = 0; i < this.data.names.length; i++) {\n                this.plotData.push([[], [], [], [], []]);\n            }\n\n            this.plotData.push([[], [], [], [], []]);\n\n            for (let i = 0; i < this.data.allMessages.length; i++) {\n                const name = this.data.allMessages[i].name;\n                const nameIndex = this.data.names.indexOf(name);\n\n                this.plotData[nameIndex][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n                this.plotData[this.data.names.length][0].push([\n                    this.data.allMessages[i].date,\n                ]);\n            }\n\n            // Count Unvonverted, still stored as unconverted\n            for (let i = 0; i < this.plotData.length; i++) {\n                let updatedUnconverted = [];\n                let lastDate = \"\";\n                for (let j = 0; j < this.plotData[i][0].length; j++) {\n                    if (this.plotData[i][0][j][0] != lastDate) {\n                        lastDate = this.plotData[i][0][j][0];\n                        updatedUnconverted.push([lastDate, 1]);\n                    } else {\n                        lastDate = this.plotData[i][0][j][0];\n                        const lastvalue =\n                            updatedUnconverted[\n                                updatedUnconverted.length - 1\n                            ][1];\n                        updatedUnconverted[updatedUnconverted.length - 1] = [\n                            lastDate,\n                            lastvalue + 1,\n                        ];\n                    }\n                }\n                this.plotData[i][0] = updatedUnconverted;\n            }\n\n            // per Day\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n\n                const allDates = [];\n                for (let j = 0; j < this.plotData[i][0].length; j++) {\n                    allDates.push(this.plotData[i][0][j][0]);\n                }\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    const date = new Date(j).toISOString().split(\"T\")[0];\n                    if (allDates.includes(date)) {\n                        const dateIndex = allDates.indexOf(date);\n                        this.plotData[i][1].push([\n                            this.plotData[i][0][dateIndex][0],\n                            this.plotData[i][0][dateIndex][1],\n                        ]);\n                    } else {\n                        this.plotData[i][1].push([date, 0]);\n                    }\n                }\n            }\n\n            // per month\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n                const allMonth = []; // 2015-06\n                let daysPerMonth = [];\n                let daysPerMonthValue = [];\n\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    // add \"empty\" months\n                    const month = new Date(j).toISOString().substring(0, 7);\n                    if (!allMonth.includes(month)) {\n                        allMonth.push(month);\n                        this.plotData[i][2].push([month, 0]);\n                        daysPerMonth.push(month);\n                        daysPerMonthValue.push(0);\n                    }\n                    const countIndex = daysPerMonth.indexOf(month);\n                    daysPerMonthValue[countIndex]++;\n                }\n                // loop throu all days\n                for (let j = 0; j < this.plotData[i][0].length; j = j + 1) {\n                    const month = this.plotData[i][0][j][0].substring(0, 7);\n                    const value = this.plotData[i][0][j][1];\n                    const monthIndex = allMonth.indexOf(month);\n\n                    this.plotData[i][2][monthIndex][1] =\n                        this.plotData[i][2][monthIndex][1] + value;\n                }\n\n                for (let j = 0; j < this.plotData[i][2].length; j = j + 1) {\n                    const month = this.plotData[i][2][j][0];\n                    const value = this.plotData[i][2][j][1];\n                    const monthIndex = daysPerMonth.indexOf(month);\n                    const days = daysPerMonthValue[monthIndex];\n                    if (value != 0) {\n                        this.plotData[i][2][j][1] = value / days;\n                    }\n                }\n            }\n\n            console.log(this.plotData);\n\n            // per year\n            for (let i = 0; i < this.plotData.length; i++) {\n                const startDate = this.plotData[i][0][0][0];\n                const endDate =\n                    this.plotData[i][0][this.plotData[i][0].length - 1][0];\n                const allYears = []; // 2015\n                let daysPerYear = [];\n                let daysPerYearValue = [];\n                for (\n                    let j = new Date(defaultPaerseTime(startDate));\n                    j <= new Date(defaultPaerseTime(endDate));\n                    j.setDate(j.getDate() + 1)\n                ) {\n                    const year = new Date(j).toISOString().substring(0, 4);\n                    if (!allYears.includes(year)) {\n                        allYears.push(year);\n                        this.plotData[i][3].push([year, 0]);\n                        daysPerYear.push(year);\n                        daysPerYearValue.push(0);\n                    }\n                    const countIndex = daysPerYear.indexOf(year);\n                    daysPerYearValue[countIndex]++;\n                }\n                for (let j = 0; j < this.plotData[i][0].length; j = j + 1) {\n                    const year = this.plotData[i][0][j][0].substring(0, 4);\n                    const value = this.plotData[i][0][j][1];\n                    const yearIndex = allYears.indexOf(year);\n                    this.plotData[i][3][yearIndex][1] =\n                        this.plotData[i][3][yearIndex][1] + value;\n                }\n                for (let j = 0; j < this.plotData[i][3].length; j = j + 1) {\n                    const year = this.plotData[i][3][j][0];\n                    const value = this.plotData[i][3][j][1];\n                    const yearIndex = daysPerYear.indexOf(year);\n                    const days = daysPerYearValue[yearIndex];\n                    if (value != 0) {\n                        this.plotData[i][3][j][1] = value / days;\n                    }\n                }\n            }\n\n            for (let i = 0; i < this.plotData.length; i++) {\n                for (let j = 0; j < this.plotData[i][3].length; j++) {\n                    this.plotData[i][4].push([\n                        this.plotData[i][3][j][0],\n                        this.plotData[i][3][j][1] *\n                            (Math.random() * (3 - 0.5) + 0.5),\n                    ]);\n                }\n            }\n\n            this.createPlot();\n        },\n        createPlot: function () {\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            d3.select(\"svg\").remove();\n\n            const svg = d3\n                .select(\"#container\")\n                .append(\"svg\")\n                //.attr(\"viewBox\", \"0 0 \" + this.width + \" \" + this.height)\n                .attr(\"viewBox\", \"0 0 1000 1000\")\n                .attr(\"preserveAspectRatio\", \"none\")\n                //.classed(\"svg-content\", true)\n                /*.attr(\n                    \"width\",\n                    this.width + this.margin.left + this.margin.right\n                )\n                .attr(\n                    \"height\",\n                    this.height + this.margin.top + this.margin.bottom\n                )\n                */\n                .append(\"g\")\n                .attr(\n                    \"transform\",\n                    `translate(${this.margin.left},${-this.margin.top})`\n                );\n\n            const x = d3\n                .scaleTime()\n\n                .range([0, this.width]);\n            const xAxis = d3.axisBottom().scale(x);\n\n            svg.append(\"g\")\n                //.attr(\"transform\", `translate(0px, ${this.height})`)\n                .attr(\"transform\", `translate(0, ${this.height})`)\n                .attr(\"class\", \"myXaxis\");\n\n            const y = d3.scaleLinear().range([this.height, 0]);\n            const yAxis = d3.axisLeft().scale(y);\n            svg.append(\"g\").attr(\"class\", \"myYaxis\");\n\n            svg.append(\"text\")\n                .attr(\"class\", \"y-label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"y\", \"-35px\")\n                .attr(\"font-size\", \"2rem\")\n                //.attr(\"y\", \"200px\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            // TOOLTIP\n            // eslint-disable-next-line\n            var rectOverlay = svg\n                .append(\"rect\")\n                //.attr(\"cursor\", \"move\")\n                .attr(\"fill\", \"none\")\n                .attr(\"pointer-events\", \"all\")\n                .attr(\"class\", \"zoom\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height)\n                .on(\"mouseover\", this.focusMouseOver())\n                .on(\"mousemove\", this.focusMouseMove())\n                .on(\"mouseout\", this.focusMouseOut());\n            /*.attr(\n                    \"transform\",\n                    \"translate(\" +\n                        this.margin.left +\n                        \",\" +\n                        this.margin.top +\n                        \")\"\n                );\n            //.call(zoom)\n            //.on(\"mousemove\", focusMouseMove)\n            .on(\"mouseover\", focusMouseOver)\n            /*.on(\"mouseout\", focusMouseOut);*/\n\n            this.x = x;\n            this.y = y;\n            this.xAxis = xAxis;\n            this.yAxis = yAxis;\n            this.svg = svg;\n            this.focus = focus;\n\n            this.setInitalLine();\n            //this.updateCurve();\n        },\n        setInitalLine() {\n            let maxY = this.calculateMaxY(this.plotData[2][this.index]);\n\n            let parseTime = this.parseTime;\n            if (this.index == 2) {\n                parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                parseTime = d3.timeParse(\"%Y\");\n            }\n\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            this.x.domain([\n                parseTime(this.starteDate),\n                parseTime(this.endDate),\n            ]);\n            this.svg.selectAll(\".myXaxis\").call(this.xAxis);\n\n            /*\n            this.svg\n                .append(\"text\")\n                .attr(\"class\", \"x label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\", this.width)\n                .attr(\"y\", this.height - 6)\n                .text(\"x-Achse\");\n            */\n\n            // create the Y axis\n            this.y.domain([0, maxY]).nice();\n            this.svg.selectAll(\".myYaxis\").call(this.yAxis);\n\n            this.svg\n                .select(\".y-label\")\n                .text(\"Average Messages Per \" + this.indexName[this.index - 1]);\n\n            // this.indexName[this.index - 1].charAt(0).toUpperCase() + this.indexName[this.index - 1].slice(1)\n            //.text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            //this.svg.select(\"title\").text(\"NEUN\");\n\n            const x = this.x;\n            // eslint-disable-next-line\n            const y = this.y;\n            const height = this.height;\n\n            const line = d3\n                .line()\n                .curve(d3.curveBumpX)\n                .x(function (d) {\n                    return x(parseTime(d[0]));\n                })\n                // eslint-disable-next-line\n                .y(function (d) {\n                    return height;\n                });\n\n            this.lineObjects = [];\n\n            for (let i = 0; i < this.classNames.length; i++) {\n                this.lineObjects.push(\n                    this.svg\n                        .selectAll(\".\" + this.classNames[i])\n                        .data([this.plotData[i][this.index]], function (d) {\n                            return parseTime(d[0]);\n                        })\n                );\n            }\n\n            //const classNames = this.classNames;\n\n            for (let i = 0; i < this.lineObjects.length; i++) {\n                this.lineObjects[i]\n                    .join(\"path\")\n                    .attr(\"class\", this.classNames[i])\n                    .merge(this.lineObjects[i])\n                    .attr(\"d\", function (d) {\n                        return line(d);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", this.colors[i])\n                    .style(\"stroke-width\", \"3\");\n            }\n            this.updateCurve();\n        },\n        updateCurve() {\n            let maxY = this.calculateMaxY(this.plotData[2][this.index]);\n\n            let parseTime = this.parseTime;\n            if (this.index == 2) {\n                parseTime = d3.timeParse(\"%Y-%m\");\n            } else if (this.index == 1) {\n                parseTime = d3.timeParse(\"%Y-%m-%d\");\n            } else if (this.index == 3) {\n                parseTime = d3.timeParse(\"%Y\");\n            }\n\n            if (this.index == 2) {\n                this.starteDate = this.plotData[2][2][0][0].substring(0, 7);\n                this.endDate = this.plotData[2][2][\n                    this.plotData[2][2].length - 1\n                ][0].substring(0, 7);\n            } else if (this.index == 1) {\n                this.starteDate = this.plotData[2][1][0][0].substring(0, 10);\n                this.endDate = this.plotData[2][1][\n                    this.plotData[2][1].length - 1\n                ][0].substring(0, 10);\n                //maxY = 60;\n            } else if (this.index == 3) {\n                this.starteDate = this.plotData[2][3][0][0].substring(0, 4);\n                this.endDate = this.plotData[2][3][\n                    this.plotData[2][3].length - 1\n                ][0].substring(0, 4);\n            }\n\n            this.x.domain([\n                parseTime(this.starteDate),\n                parseTime(this.endDate),\n            ]);\n            this.svg\n                .selectAll(\".myXaxis\")\n                .transition()\n                .duration(1000)\n                .call(this.xAxis);\n\n            /*\n            this.svg\n                .append(\"text\")\n                .attr(\"class\", \"x label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\", this.width)\n                .attr(\"y\", this.height - 6)\n                .text(\"x-Achse\");\n            */\n\n            // create the Y axis\n            this.y.domain([0, maxY]).nice();\n            this.svg\n                .selectAll(\".myYaxis\")\n                .transition()\n                .duration(1000)\n                .call(this.yAxis);\n\n            this.svg\n                .select(\".y-label\")\n                .transition()\n                .duration(1000)\n                //.text(\"Average Messages Per \" + this.indexName[this.index - 1]);\n                .text(\"Average Messages Per Day\");\n\n            // this.indexName[this.index - 1].charAt(0).toUpperCase() + this.indexName[this.index - 1].slice(1)\n            //.text(\"average messages per \" + this.indexName[this.index - 1]);\n\n            //this.svg.select(\"title\").text(\"NEUN\");\n\n            const x = this.x;\n            const y = this.y;\n\n            const line = d3\n                .line()\n                .curve(d3.curveBumpX)\n                .x(function (d) {\n                    return x(parseTime(d[0]));\n                })\n                .y(function (d) {\n                    return y(d[1]);\n                });\n\n            this.lineObjects = [];\n\n            for (let i = 0; i < this.classNames.length; i++) {\n                this.lineObjects.push(\n                    this.svg\n                        .selectAll(\".\" + this.classNames[i])\n                        .data([this.plotData[i][this.index]], function (d) {\n                            return parseTime(d[0]);\n                        })\n                );\n            }\n\n            const classNames = this.classNames;\n\n            for (let i = 0; i < this.lineObjects.length; i++) {\n                this.lineObjects[i]\n                    .join(\"path\")\n                    .attr(\"class\", this.classNames[i])\n                    .merge(this.lineObjects[i])\n                    .transition()\n                    .duration(1000)\n                    .attrTween(\"d\", function (d) {\n                        var previous = d3.select(\".\" + classNames[i]).attr(\"d\");\n                        var current = line(d);\n                        return interpolatePath(previous, current);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", this.colors[i])\n                    .style(\"stroke-width\", \"3\");\n            }\n        },\n        calculateMaxY: function (array) {\n            let max = 0;\n            for (let i = 0; i < array.length; i++) {\n                if (array[i][1] > max) {\n                    max = array[i][1];\n                }\n            }\n            if (max < 10) {\n                max = 10;\n            } else if (max < 100) {\n                let modulo = max % 10;\n                max = max - modulo + 10;\n            } else if (max < 500) {\n                let modulo = max % 100;\n                max = max - modulo + 100;\n            } else if (max < 1000) {\n                let modulo = max % 200;\n                max = max - modulo + 200;\n            } else if (max < 10000) {\n                let modulo = max % 500;\n                max = max - modulo + 500;\n            }\n            return max;\n        },\n        focusMouseOver: function () {\n            console.log(\"DRIN\");\n        },\n        focusMouseMove: function () {\n            console.log(\"BEWEGUNG!\");\n        },\n        focusMouseOut: function () {\n            console.log(\"DRAUSSEN\");\n        },\n        /*\n        mousemove: function () {\n            var x0 = x.invert(d3.mouse(this)[0]),\n                i = bisectDate(data, x0, 1),\n                d0 = data[i - 1],\n                d1 = data[i],\n                d = x0 - d0.date > d1.date - x0 ? d1 : d0;\n            this.focus.attr(\n                \"transform\",\n                \"translate(\" + x(d.date) + \",\" + y(d.likes) + \")\"\n            );\n            this.focus.select(\".tooltip-date\").text(dateFormatter(d.date));\n            this.focus.select(\".tooltip-likes\").text(formatValue(d.likes));\n        },\n        */\n    },\n};\n</script>\n<!-- css loaderhttps://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles -->\n<style>\n/* AXES */\n/* ticks */\n.axis line {\n    stroke: #706f6f;\n    stroke: black;\n    stroke-width: 0.5;\n    shape-rendering: crispEdges;\n    color: black;\n}\n\n/* axis contour */\n.axis path {\n    stroke: #706f6f;\n    stroke: black;\n    stroke-width: 0.7;\n    shape-rendering: crispEdges;\n}\n\n/* axis text */\n.axis text {\n    fill: #2b2929;\n    font-family: Georgia;\n    font-size: 120%;\n}\n\n/* STYLE BUTTONS */\n.button-box {\n    width: max-content;\n    margin: auto;\n}\n\n.button {\n    min-width: 50px;\n    width: max-content;\n    height: 35px;\n    border-style: none;\n    background-color: white;\n    margin-right: 20px;\n    text-decoration: none;\n    color: #000;\n}\n\n.button:last-child {\n    margin-right: 0px;\n}\n\n.button {\n    position: relative;\n    color: #000;\n    text-decoration: none;\n}\n\n.button:hover {\n    color: #000;\n}\n\n.button::before {\n    content: \"\";\n    position: absolute;\n    display: block;\n    width: 100%;\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: #000;\n    transform: scaleX(0);\n    transition: transform 0.3s ease;\n    /*\n    -webkit-transition: all 0.3s ease-in-out;\n    -moz-transition: all 0.3s ease-in-out;\n    -ms-transition: all 0.3s ease-in-out;\n    -o-transition: all 0.3s ease-in-out;\n    */\n}\n\n.button:hover::before {\n    transform: scaleX(1);\n}\n\n.active {\n    position: relative;\n}\n\n.active::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    height: 2px;\n    left: 0;\n    bottom: 0;\n    background-color: black;\n    transition: all 0.3s ease-in-out;\n    /*\n    -webkit-transition: all 0.3s ease-in-out;\n    -moz-transition: all 0.3s ease-in-out;\n    -ms-transition: all 0.3s ease-in-out;\n    -o-transition: all 0.3s ease-in-out;\n    */\n}\n\n/* title */\n.title {\n    font-size: 20px;\n    text-anchor: middle;\n    color: black;\n}\n\n/* Resize */\n\n.svg-container {\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    vertical-align: top;\n    overflow: hidden;\n}\n.svg-content {\n    display: inline-block;\n    position: absolute;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./D3LineChartv3Resize.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./D3LineChartv3Resize.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./D3LineChartv3Resize.vue?vue&type=template&id=6fa7d185&\"\nimport script from \"./D3LineChartv3Resize.vue?vue&type=script&lang=js&\"\nexport * from \"./D3LineChartv3Resize.vue?vue&type=script&lang=js&\"\nimport style0 from \"./D3LineChartv3Resize.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"test\"},[_c('p',{staticStyle:{\"height\":\"80px\",\"color\":\"black\"}},[_vm._v(\"Guten Tag! Wie gehts?!?!\")]),_c('div',{staticClass:\"content\"})])}]\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"test\">\n        <p style=\"height: 80px; color: black\">Guten Tag! Wie gehts?!?!</p>\n        <div class=\"content\"></div>\n    </div>\n</template>\n\n<script>\nexport default {\n    // eslint-disable-next-line\n    name: \"TestVue\",\n    props: {},\n\n    data() {\n        return {};\n    },\n    mounted() {},\n};\n</script>\n\n<style>\n.content {\n    width: 100%;\n    height: calc(100% - 80px);\n    position: absolut;\n}\n.test {\n    width: 100%;\n    height: 100%;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TestVue.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TestVue.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TestVue.vue?vue&type=template&id=d2a818ac&\"\nimport script from \"./TestVue.vue?vue&type=script&lang=js&\"\nexport * from \"./TestVue.vue?vue&type=script&lang=js&\"\nimport style0 from \"./TestVue.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n    <div id=\"app\">\n        <div v-show=\"this.showSelectedNames\" class=\"blurred-background\"></div>\n        <div v-show=\"this.showSelectedNames\" class=\"select-names\">\n            <h1 class=\"select-names-header\">Select the Names</h1>\n            <div class=\"select-names-general-buttons\">\n                <button\n                    class=\"select-names-general-button\"\n                    @click=\"selectAllNames()\"\n                >\n                    Select All\n                </button>\n                <button\n                    class=\"select-names-general-button\"\n                    @click=\"unselectAllNames()\"\n                >\n                    Unselect All\n                </button>\n                <button\n                    class=\"select-names-general-button\"\n                    @click=\"unselectUnsavedContacts()\"\n                >\n                    Unselect not saved contacts\n                </button>\n                <button\n                    class=\"select-names-general-button\"\n                    @click=\"selectTopTen()\"\n                >\n                    Select Top 10\n                </button>\n            </div>\n            <div class=\"select-names-list\">\n                <div\n                    class=\"select-names-line\"\n                    v-for=\"(element, index) in selectedNames\"\n                    v-bind:key=\"index\"\n                >\n                    <input\n                        type=\"checkbox\"\n                        class=\"select-name-button\"\n                        :checked=\"element.active\"\n                        @click=\"selectName(index)\"\n                    />\n                    <div class=\"select-names-name\">\n                        {{ element.name }} (Nachrichten:\n                        {{ element.numberOfMessages }})\n                    </div>\n                </div>\n            </div>\n            <div class=\"select-names-bottom-buttons\">\n                <button\n                    class=\"select-names-bottom-button\"\n                    @click=\"finishSelectNames()\"\n                >\n                    Weiter\n                </button>\n            </div>\n        </div>\n        <div class=\"reselect-names\">\n            <div class=\"reselect-names-top\">\n                <button @click=\"showReselectNames = !showReselectNames\">\n                    {{ showReselectNames }}\n                </button>\n\n                <v-icon name=\"arrow-down\" />\n            </div>\n            <div v-show=\"showReselectNames\" class=\"reselect-names-content\">\n                <div\n                    class=\"reselect-names-line\"\n                    v-for=\"(element, index) in selectedNames\"\n                    v-bind:key=\"index\"\n                >\n                    <input\n                        type=\"checkbox\"\n                        class=\"reselect-name-button\"\n                        :checked=\"element.active\"\n                        @click=\"selectName(index)\"\n                    />\n                    <div class=\"reselect-names-name\">\n                        {{ element.name }} (Nachrichten:\n                        {{ element.numberOfMessages }})\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div id=\"zone\">\n            <input\n                type=\"file\"\n                id=\"input\"\n                name=\"myfile\"\n                class=\"inputfile\"\n                @change=\"showfile\"\n            />\n            <label for=\"file\">Choose a file</label>\n        </div>\n        <div class=\"grid\">\n            <div class=\"grid-element\" id=\"grid-plot-1\">\n                <Plot1\n                    :data=\"allChats\"\n                    :globalWidth=\"widthPlot1\"\n                    classIDProp=\"plot-1\"\n                />\n            </div>\n            <div class=\"grid-element\" id=\"grid-plot-2\">\n                <Plot2\n                    :data=\"allChats\"\n                    :globalWidth=\"widthPlot2\"\n                    classIDProp=\"plot-2\"\n                />\n            </div>\n            <div class=\"grid-element\" id=\"grid-plot-6\">\n                <Plot6\n                    :data=\"allChats\"\n                    :globalWidth=\"widthPlot6\"\n                    classIDProp=\"plot-6\"\n                />\n            </div>\n            <div>\n                <TestPlot :data=\"allChats\" />\n            </div>\n            <!--             <div class=\"grid-element\" id=\"grid-plot-2\">\n                <Plot2\n                    :data=\"allChats\"\n                    :globalWidth=\"widthPlot1\"\n                    classIDProp=\"plot-2\"\n                />\n            </div>\n            <div class=\"grid-element\" id=\"grid-plot-3\">\n                <Plot3 classIDProp=\"plot-3\" :data=\"allChats\" />\n            </div>\n            <div class=\"grid-element\" id=\"grid-plot-4\">\n                <Plot4\n                    classIDProp=\"plot-4\"\n                    :selectedNames=\"selectedNames\"\n                    :data=\"allChats\"\n                />\n            </div>\n            <div class=\"grid-element\" id=\"grid-plot-5\">\n                <Plot5 classIDProp=\"plot-5\" :data=\"allChats\" />\n            </div>\n            <div class=\"grid-element\" id=\"grid-plot-6\">6</div>\n            <div class=\"grid-element\" id=\"grid-plot-7\">7</div> -->\n        </div>\n    </div>\n</template>\n\n<script>\n//import HelloWorld from './components/HelloWorld.vue'\n// eslint-disable-next-line\nimport MsgOverTime from \"./components/charts/MsgOverTime.vue\";\n// eslint-disable-next-line\nimport MsgOverTime2 from \"./components/charts/MsgOverTime2.vue\";\n// eslint-disable-next-line\nimport MsgOverTime3 from \"./components/charts/MsgOverTime3.vue\";\n// eslint-disable-next-line\nimport MsgOverTime4 from \"./components/charts/MsgOverTime4.vue\";\n// eslint-disable-next-line\nimport D3LineChart from \"./components/charts/D3LineChart.vue\";\n// eslint-disable-next-line\nimport D3LineChartv2 from \"./components/charts/D3LineChartv2.vue\";\n// eslint-disable-next-line\nimport Plot1 from \"./components/charts/Plot1.vue\";\nimport Plot2 from \"./components/charts/Plot2.vue\";\n// import Plot3 from \"./components/charts/Plot3.vue\";\n// import Plot4 from \"./components/charts/Plot4.vue\";\n// import Plot5 from \"./components/charts/Plot5.vue\";\nimport Plot6 from \"./components/charts/Plot6.vue\";\nimport TestPlot from \"./components/charts/TestPlot.vue\";\n// eslint-disable-next-line\nimport D3BarPlot from \"./components/charts/D3BarPlot.vue\";\nimport D3LineChartv3Resize from \"./components/charts/D3LineChartv3Resize.vue\";\n// eslint-disable-next-line\nimport TestVue from \"./components/charts/TestVue.vue\";\n\nexport default {\n    name: \"App\",\n    data() {\n        return {\n            d3Data: { 0: 100, 1: 200, 2: 167, 3: 776 },\n            data: [],\n            width: 100,\n            height: 100,\n            showReselectNames: false,\n            allChats: {\n                names: [],\n                allMessages: [],\n                messagesPerPersoan: [],\n                totalConfig: {\n                    firstMessage: \"\",\n                    totalMessages: 0,\n                    messagesPerTime: {},\n                },\n                configPerPersoan: [],\n            },\n            allNames: [],\n            config: {\n                firstMsg: \"\",\n                totalMsg: 0,\n                names: [],\n            },\n            allWidths: [0, 0, 0, 0, 0, 0, 0],\n            allWidths2: {\n                plot1: 0,\n                plot2: 0,\n                plot3: 0,\n                plot4: 0,\n                plot5: 0,\n                plot6: 0,\n                plot7: 0,\n            },\n            testProp: 1,\n            widthPlot1: 0,\n            showSelectedNames: false,\n            selectedNames: [],\n        };\n    },\n    components: {\n        // eslint-disable-next-line\n        Plot1,\n        Plot2,\n        // Plot3,\n        // Plot4,\n        // Plot5,\n        Plot6,\n        TestPlot,\n        // eslint-disable-next-line\n        D3LineChartv3Resize,\n        // eslint-disable-next-line\n        TestVue,\n    },\n    mounted() {\n        window.addEventListener(\"resize\", this.myEventHandler);\n    },\n    methods: {\n        myEventHandler() {\n            this.testProp++;\n            const widthPlot1 =\n                document.querySelector(\"#grid-plot-1\").clientWidth;\n            const widthPlot2 =\n                document.querySelector(\"#grid-plot-2\").clientWidth;\n            const widthPlot3 =\n                document.querySelector(\"#grid-plot-3\").clientWidth;\n            const widthPlot4 =\n                document.querySelector(\"#grid-plot-4\").clientWidth;\n            const widthPlot5 =\n                document.querySelector(\"#grid-plot-5\").clientWidth;\n            const widthPlot6 =\n                document.querySelector(\"#grid-plot-6\").clientWidth;\n            const widthPlot7 =\n                document.querySelector(\"#grid-plot-7\").clientWidth;\n\n            this.allWidths[0] = widthPlot1;\n            this.allWidths[1] = widthPlot2;\n            this.allWidths[2] = widthPlot3;\n            this.allWidths[3] = widthPlot4;\n            this.allWidths[4] = widthPlot5;\n            this.allWidths[5] = widthPlot6;\n            this.allWidths[6] = widthPlot7;\n\n            this.allWidths2.plot1 = widthPlot1;\n            this.allWidths2.plot2 = widthPlot2;\n            this.allWidths2.plot3 = widthPlot3;\n            this.allWidths2.plot4 = widthPlot4;\n            this.allWidths2.plot5 = widthPlot5;\n            this.allWidths2.plot6 = widthPlot6;\n            this.allWidths2.plot7 = widthPlot7;\n\n            this.widthPlot1 = widthPlot1;\n        },\n        showfile: async function () {\n            var selectedFile = document.getElementById(\"input\").files[0];\n            let text = await selectedFile.text();\n\n            const dateRegEx =\n                /\\[\\d\\d\\.\\d\\d\\.\\d\\d,\\s[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{1,3})?\\]/g;\n\n            let allDates = text.match(dateRegEx);\n            let allMessanges = text.split(/\\[\\d\\d.\\d\\d.\\d\\d, \\d\\d:\\d\\d:\\d\\d\\]/);\n            allMessanges.shift();\n            this.data = [];\n            this.allNames = [];\n            this.allChats = {\n                names: [],\n                allMessages: [],\n                messagesPerPersoan: [],\n                totalConfig: {\n                    firstMessage: \"\",\n                    totalMessages: 0,\n                    messagesPerTime: {},\n                },\n                configPerPersoan: [],\n            };\n            this.convertData(allDates, allMessanges);\n        },\n        creatAllNamesArray: function () {\n            this.showSelectedNames = true;\n            this.selectedNames = [];\n            // eslint-disable-next-line\n            for (let i = 0; i < this.allChats.names.length; i++) {\n                this.selectedNames.push({\n                    name: this.allChats.names[i],\n                    active: true,\n                    numberOfMessages:\n                        this.allChats.configPerPersoan[i].totalMessages,\n                });\n            }\n            //this.$set(this.selectedNames, 0, this.selectedNames[0]);\n            console.log(this.allChats);\n        },\n        convertData: function (dates, msg) {\n            for (let i = 0; i < dates.length; i++) {\n                if (!msg[i].includes(\":\")) continue;\n                if (msg[i].includes(\"Ende-zu-Ende-verschlüsselt\")) continue;\n                if (\n                    msg[i].includes(\n                        \"Deine Sicherheitsnummer für alle Teilnehmer\"\n                    )\n                )\n                    continue;\n                let [name, ...message] = msg[i].split(\": \");\n                message = message\n                    .join(\": \")\n                    .replace(/(\\r\\n|\\n|\\r)/gm, \" \")\n                    .replace(/\\s{2,}/g, \" \")\n                    .trim();\n                name = name.trim();\n                const length = message.length;\n                let date = dates[i].slice(1, 9);\n                date =\n                    \"20\" +\n                    date.substring(6, 8) +\n                    \"-\" +\n                    date.substring(3, 5) +\n                    \"-\" +\n                    date.substring(0, 2);\n                const time = dates[i].slice(11, 19);\n                const timestamp = this.toTimestamp(\n                    date.substring(0, 4),\n                    date.substring(5, 7),\n                    date.substring(8, 10),\n                    time.substring(0, 2),\n                    time.substring(3, 5),\n                    time.substring(6, 8)\n                );\n                if (!this.allNames.includes(name)) {\n                    this.allNames.push(name);\n                    this.config.names.push({ totalMsg: 0 });\n                }\n                if (!this.allChats.names.includes(name)) {\n                    this.allChats.names.push(name);\n                    this.allChats.configPerPersoan.push({\n                        totalMessages: 0,\n                        firstMessage: \"\",\n                        messagesPerTime: {},\n                    });\n                    this.allChats.messagesPerPersoan.push([]);\n                }\n\n                const weekday = new Date(\n                    date.substring(0, 4) +\n                        \"-\" +\n                        date.substring(5, 7) +\n                        \"-\" +\n                        date.substring(8, 10)\n                ).getDay();\n                //console.log(date + \": \" + weekday);\n                this.allChats.allMessages.push({\n                    date: date, // e.g. 2022-04-14\n                    day: date.substring(8, 10),\n                    month: date.substring(5, 7),\n                    year: date.substring(0, 4),\n                    msg: message,\n                    weekday: weekday,\n                    name: name,\n                    time: time,\n                    length: length,\n                    timestamp: timestamp,\n                    dateAndTime: dates[i].substring(1, 19),\n                });\n                this.allChats.messagesPerPersoan[\n                    this.allNames.indexOf(name)\n                ].push({\n                    date: date,\n                    day: date.substring(8, 10),\n                    month: date.substring(5, 7),\n                    year: date.substring(0, 4),\n                    msg: message,\n                    name: name,\n                    time: time,\n                    length: length,\n                    timestamp: timestamp,\n                    dateAndTime: dates[i].substring(1, 19),\n                });\n                this.data.push({\n                    date: date,\n                    msg: message,\n                    name: name,\n                    time: time,\n                    length: length,\n                    timestamp: timestamp,\n                });\n                this.config.totalMsg++;\n                this.allChats.totalConfig.totalMessages++;\n                if (i == 0) {\n                    this.config.firstMsg = date;\n                    this.allChats.totalConfig.firstMessage = date;\n                }\n\n                this.config.names[this.allNames.indexOf(name)].totalMsg++;\n                this.allChats.configPerPersoan[this.allNames.indexOf(name)]\n                    .totalMessages++;\n\n                if (\n                    this.allChats.configPerPersoan[this.allNames.indexOf(name)]\n                        .firstMessage == \"\"\n                ) {\n                    this.allChats.configPerPersoan[\n                        this.allNames.indexOf(name)\n                    ].firstMessage = date;\n                }\n            }\n            this.creatAllNamesArray();\n            this.calculateMsgPerTime();\n        },\n        calculateMsgPerTime: function () {\n            this.allChats.totalConfig.messagesPerTime = {\n                x: [\n                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n                    17, 18, 19, 20, 21, 22, 23,\n                ],\n                y: [\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                    0, 0, 0, 0,\n                ],\n            };\n            for (let i = 0; i < this.allNames.length; i++) {\n                this.allChats.configPerPersoan[i].messagesPerTime = {\n                    x: [\n                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                        16, 17, 18, 19, 20, 21, 22, 23,\n                    ],\n                    y: [\n                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                        0, 0, 0, 0, 0,\n                    ],\n                };\n            }\n            for (let i = 0; i < this.allChats.allMessages.length; i++) {\n                const hour = parseInt(\n                    this.allChats.allMessages[i].time.substring(0, 2)\n                );\n                const nameIndex = this.allNames.indexOf(\n                    this.allChats.allMessages[i].name\n                );\n\n                this.allChats.totalConfig.messagesPerTime.y[hour]++;\n                this.allChats.configPerPersoan[nameIndex].messagesPerTime.y[\n                    hour\n                ]++;\n            }\n        },\n        toTimestamp: function (year, month, day, hour, minute, second) {\n            var datum = new Date(\n                Date.UTC(year, month - 1, day, hour, minute, second)\n            );\n            return datum.getTime() / 1000;\n        },\n        onResize: function ({ width, height }) {\n            console.log(width, height);\n            console.log(\"Moin\");\n        },\n        selectAllNames: function () {\n            this.selectedNames.forEach((element) => {\n                element.active = true;\n            });\n        },\n        unselectAllNames: function () {\n            this.selectedNames.forEach((element) => {\n                element.active = false;\n            });\n        },\n        unselectUnsavedContacts: function () {\n            var hasNumber = /\\d/;\n            this.selectedNames.forEach((element) => {\n                element.active = !hasNumber.test(element.name);\n            });\n        },\n        selectTopTen: function () {\n            if (this.selectedNames.length < 10) return;\n            this.unselectAllNames();\n            let maxValue = 0;\n            let maxIndex = -1;\n            for (let i = 0; i < 10; i++) {\n                this.selectedNames.forEach((element, index) => {\n                    if (\n                        !element.active &&\n                        element.numberOfMessages > maxValue\n                    ) {\n                        maxIndex = index;\n                        maxValue = element.numberOfMessages;\n                    }\n                });\n                this.selectedNames[maxIndex].active = true;\n                maxValue = 0;\n                maxIndex = -1;\n            }\n        },\n        finishSelectNames: function () {\n            this.showSelectedNames = false;\n            console.log(this.selectedNames);\n        },\n        selectName: function (index) {\n            this.selectedNames[index].active =\n                !this.selectedNames[index].active;\n        },\n    },\n};\n</script>\n\n<style>\n#app {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n\n    /* margin-top: -20px; */\n}\n\n.plot-inside {\n    min-width: 500px;\n    max-width: calc(100% - 80px);\n    border-radius: 50px;\n    padding: 20px;\n    margin: 40px;\n    box-shadow: 0px 0px 20px 20px rgba(0, 0, 0, 0.234);\n    height: 100%;\n    background-color: white;\n}\n\n.plot-box {\n    max-width: 100vw;\n    background-color: rgb(163, 196, 172);\n    width: max-content;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    margin: 20px;\n    height: 600px;\n    margin-top: 50px;\n}\n\n.plot-area {\n    display: flex;\n    flex-wrap: wrap;\n    width: 100vw;\n}\n\n/*\n\n<div class=\"plot-area\">\n            <div class=\"plot-box\" style=\"flex-grow: 1\">\n                <MsgOverTime\n                    class=\"plot-inside\"\n                    :msgData=\"data\"\n                    :names=\"allNames\"\n                />\n            </div>\n            <div class=\"plot-box\" style=\"flex-grow: 1\">\n                <MsgOverTime2\n                    class=\"plot-inside\"\n                    :msgData=\"data\"\n                    :names=\"allNames\"\n                    :config=\"config\"\n                />\n            </div>\n            <div class=\"plot-box\" style=\"flex-grow: 2\">\n                <MsgOverTime3\n                    class=\"plot-inside\"\n                    :msgData=\"data\"\n                    :names=\"allNames\"\n                />\n            </div>\n            <div class=\"plot-box\" style=\"flex-grow: 2\">\n                <MsgOverTime4\n                    class=\"plot-inside\"\n                    :msgData=\"data\"\n                    :names=\"allNames\"\n                />\n            </div>\n            <div class=\"plot-box\" style=\"flex-grow: 2\">\n                <MsgOverTime3\n                    class=\"plot-inside\"\n                    :msgData=\"data\"\n                    :names=\"allNames\"\n                />\n            </div>\n        </div>\n\n*/\n\n#zone {\n    margin: 100px;\n    width: min-content;\n}\n\n.grid {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-content: stretch;\n    max-width: 1500px;\n    background-color: rgba(0, 0, 0, 0.02);\n    margin: auto;\n    padding: 15px;\n}\n\n.grid-element {\n    height: 480px;\n    min-width: 100px;\n    background-color: white;\n    margin: 30px;\n    overflow: hidden;\n    width: min-content;\n}\n#grid-plot-1 {\n    flex-grow: 2;\n    min-width: 800px;\n}\n\n#grid-plot-2 {\n    flex-grow: 2;\n    min-width: 800px;\n}\n\n#grid-plot-3 {\n    flex-grow: 4;\n    min-width: 400px;\n}\n\n#grid-plot-4 {\n    flex-grow: 6;\n    min-width: 600px;\n}\n\n#grid-plot-5 {\n    flex-grow: 4;\n    min-width: 400px;\n}\n\n#grid-plot-6 {\n    flex-grow: 8;\n    min-width: 800px;\n}\n\n#grid-plot-7 {\n    flex-grow: 1;\n    min-width: 600px;\n}\n\n.tick {\n    font-size: 0.8rem;\n}\n\n/* Style select name window */\n.select-names {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: white;\n    height: 500px;\n    width: 700px;\n    padding: 30px;\n    border-style: solid;\n}\n\n.select-names-header {\n    height: 3rem;\n    margin-bottom: 0;\n}\n\n.select-names-line {\n    width: 100%;\n    display: flex;\n    height: 2rem;\n}\n\n.select-names-name {\n    font-size: 1.3rem;\n}\n\n.select-names-general-button {\n    background-color: transparent;\n    border: none;\n    height: 2rem;\n}\n\n.select-names-general-button:first-child {\n    margin-right: 10px;\n}\n\n.select-name-button {\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-right: 30px;\n    height: 1.3rem;\n    width: 1.3rem;\n}\n\n.select-names-list {\n    height: calc(500px - 7rem - 60px);\n    overflow: scroll;\n}\n\n.select-names-bottom-buttons {\n    position: absolute;\n    bottom: 30px;\n    margin: auto;\n    width: calc(100% - 60px);\n}\n\n.select-names-bottom-button {\n    background-color: transparent;\n    border: none;\n    height: 2rem;\n}\n\n.blurred-background {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(80, 130, 89, 0.95);\n}\n\n.reselect-names-line {\n    display: flex;\n    max-width: 500px;\n    margin: auto;\n}\n\n.reselect-names {\n    margin: auto;\n    max-width: 600px;\n}\n\n.reselect-names-top {\n    display: flex;\n    border-style: solid;\n    border-top-style: none;\n    border-bottom-left-radius: 10px;\n    border-bottom-right-radius: 10px;\n    padding: 5px;\n}\n\n.reselect-names-content {\n    border-style: solid;\n    border-top-style: none;\n    border-bottom-left-radius: 10px;\n    border-bottom-right-radius: 10px;\n    border-color: grey;\n    max-width: 500px;\n    margin: auto;\n    padding: 10px;\n}\n\n.icon {\n    width: 20px;\n    height: 20px;\n}\n</style>\n","import mod from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=31fe37ea&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\nimport BootstrapVue from 'bootstrap-vue/dist/bootstrap-vue.esm';\nimport 'bootstrap-vue/dist/bootstrap-vue.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport 'vue-awesome/icons'\nimport Icon from 'vue-awesome/components/Icon'\n\nconst VueResizeObserver = require(\"vue-resize-observer\");\n\nVue.use(BootstrapVue);\nVue.use(VueResizeObserver); // use is a static method\n\nVue.component('v-icon', Icon)\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkchat_analyzer\"] = self[\"webpackChunkchat_analyzer\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(8298); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","directives","name","rawName","value","expression","staticClass","_v","on","$event","selectAllNames","unselectAllNames","unselectUnsavedContacts","selectTopTen","_l","element","index","key","domProps","active","selectName","_s","numberOfMessages","finishSelectNames","showReselectNames","showfile","allChats","widthPlot1","widthPlot2","widthPlot6","staticRenderFns","dataTest","layout","transition","buttonsNames","staticStyle","Vue","components","props","buttons","mounted","methods","component","PlotButtons","msgData","names","x","y","title","type","yaxis","autorange","automargin","mirror","margin","padding","showlegend","legend","orientation","xaxis","rangeselector","count","label","step","stepmode","rangeslider","duration","easing","frame","watch","prepareData","date","prevDate","dataObj","currentValue","console","buttonsNames1","buttonsNames2","config","showRelatice","labels","values","obj","numberMsg","startedConversation","endedConversation","msgLength","timeBetweenConversations","convObj","conversation","data","close","open","i","time","number","j","init","top","right","bottom","left","width","height","append","attr","d","d3","svg","style","valueline","call","_m","plotData","starteDate","endDate","parseTime","allCurveObjects","curve","xScale","yScale","changeIndex","substring","domain","range","datum","prepareData2","lastDate","updatedUnconverted","lastvalue","allDates","allMonth","allYears","createPlot","g","calculateMaxY","max","classID","indexName","changeIndex2","globalWidth","classIDProp","xAxis","yAxis","focus","classNames","classNamesDot","lineObjects","colors","size","el","window","createClassArrays","getStartWidth","document","myEventHandler","switchSize","changeSize","daysPerMonth","daysPerMonthValue","daysPerYear","daysPerYearValue","Math","text","maxY","select","selectAll","join","merge","attrTween","focusMouseOver","focusMouseMove","focusMouseOut","hourString","minuteString","sum","scale","tickFormat","model","callback","$$v","testdate","DatePicker","Country","Value","delay","d3Data","allMessages","messagesPerPersoan","totalConfig","firstMessage","totalMessages","messagesPerTime","configPerPersoan","allNames","firstMsg","totalMsg","allWidths","allWidths2","plot1","plot2","plot3","plot4","plot5","plot6","plot7","testProp","showSelectedNames","selectedNames","TestVue","allMessanges","creatAllNamesArray","convertData","msg","message","replace","trim","getDay","day","month","year","weekday","length","timestamp","dateAndTime","push","calculateMsgPerTime","hour","toTimestamp","Date","onResize","maxIndex","maxValue","VueResizeObserver","require","BootstrapVue","Icon","h","App","$mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","splice","r","n","getter","__esModule","a","definition","o","defineProperty","enumerable","get","globalThis","Function","e","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}